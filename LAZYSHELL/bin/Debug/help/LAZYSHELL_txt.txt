LAZY SHELL - Super Mario RPG Editor
Version: 3.19.0
Date: January 22, 2014
Home Page: http://home.comcast.net/~giangurgolo/smrpg/
Written by giangurgolo and Omega

_______________________________________________________________________

READ THIS FIRST
_______________________________________________________________________

If this is your first time using Lazy Shell, please take the time to
read the following advice:

1. When planning a hack project, the wisest thing to do is to make sure
   you have the back-up option enabled in the settings. Click the cog icon
   and check either "Create Back-up ROM on Load" or "Create Back-up ROM on
   Save" to enable it. I often hear about users throwing in the towel when
   the application corrupts the ROM, never having bothered to use the
   back-up feature.

2. If you receive an error prompt, please follow the directions in the
   prompt window and copy ALL of the contents of the error message and
   post them to the given link in the window. Unless you do this, there is
   little hope of the bug ever being fixed unless someone else encounters
   it and posts it to the link. Keep in mind, I do read bug reports and I
   do attempt to fix the reported bugs, so your post will not be a waste
   of time.

3. If the unfortunate occasion might arise that the application
   actually does corrupt your ROM, you can try resetting the corrupted
   elements by importing those specific elements from a fresh SMRPG ROM.
   Click the button "Import elements from another ROM" (a down-arrow over
   a small white box), select a fresh ROM, and check the elements you want
   to import.

Should you encounter any issues, errors, problems, or irritations using
the application, please post them to one of the following links:
http://acmlm.kafuka.org/board/thread.php?id=7005
http://www.smwcentral.net/?p=viewthread&t=45572
Press Ctrl+Ins to copy the contents of this message box to the
clipboard. Thank you for using the program.

_______________________________________________________________________

INTRODUCTION
_______________________________________________________________________

Lazy Shell is a third party .NET application written in the C#
programming language which is capable of editing a wide range of
elements within the Super Mario RPG (US) ROM image file. These elements
include allies, battle animations, attacks, spells, sound effects,
music, battlefields, dialogues, fonts, effects, events, formations,
items, shops, level/location maps, the main title, menus, the mine-cart
maps, monsters, sprites, world maps, and more. In addition, it also
includes a help database and a project manager to help organize a full
hack project.

_______________________________________________________________________

PROGRAM REQUIREMENTS
_______________________________________________________________________

Microsoft .NET Framework 2.0 or higher must be installed on the system
for the application to run at all.
Minimal system requirements:
512MB of RAM (1GB recommended)
10MB HD space (more if ROM back-ups used)

_______________________________________________________________________

MAIN FEATURES
_______________________________________________________________________

The editor is comprised of 17 individual editors. 
Various status editors include modification capabilities for the
statuses of monsters, formations, formation packs, items, spells,
attacks, shops, new game properties, level-ups, and timing properties.
The monsters editor contains a battle script editor for each monster. 
The Levels portion allows the user to modify the maps of areas (aka
locations) using a paint-like interface, the NPCs (ie the sprites in
the maps), the exit fields (aka entrances), event fields, overlaps, and
the basic layering properties. A template creator/editor lets the user
to store a separate portion of the map composed of all 3 layers and the
physical layer into a single file. 
The two scripts editors in Lazy Shell enable the user to modify the
event scripts, action scripts, and animations scripts. Commands within
event scripts and action scripts may be added, modified, deleted,
moved, or copied and pasted. Commands within animation scripts may be
modified, moved, or replaced with new commands of the same or smaller
length, but adding/deleting entirely new commands within animations is
not supported and never will be due to the fickle and erratic nature of
the animation script engine. 
The Sprites editor is able to modify a sprite's graphics, palette, and
animations. The effects editor allows the user to edit spell effects
and their respective graphics, palettes, and animations. 
In the Dialogue editor, the user may view and edit the dialogues (aka
the game script) as well as the dialogues which appear in battles and
the graphics of the dialogue background tiles. Fonts, font colors, and
a new font generator will let the user create an entirely new font
table based upon manual editing or a supportive font installed on the
OS.
In the World Maps editor World maps, world map palettes, and the
locations that appear on world maps can be modified. The logo banner
graphics and palettes can be modified as well.
The Audio editor can export, import, clear, and playback the audio
samples used by the SPC engine. The .wav files can be edited in a third
party program such as Audacity. SPC data can be edited in a variety of
ways, allowing the user to create entirely new pieces of music.
Instruments can be changed as well as well as the raw SPC track data,
which can even import custom scripts from a text document.
The mini-games editor so far can modify the minecart mini game maps for
all four stages and the objects in the same manner as levels. The menus
editor allows the user to modify the menu palettes and import an
external image into the menu backgrounds, as well as import an image
into the frame image.

_______________________________________________________________________

EXTRA FEATURES
_______________________________________________________________________

The portions of the editor have tooltips for almost every single
control. Just press F1 (or click the ? buttons found in most editors)
and move the mouse over a control to see what that property is for.
There is also a conversion tooltip for showing the hexadecimal or
decimal value for the value in the control when moving the mouse cursor
over it. Press F2 to enable this feature, or click the base conversion
button found in most editors. 
Users are also able to import and export many elements from previously
exported .dat, .bin, or .pal files in all portions of the editor as a
means of backing up or inter-changing elements. Clearing/erasing data
is managed as well so as to free up space for new scripts or dialogues.
The notes database manager was written for the editor to aid the user
aiming to create a full or partial hack. Indexes for elements such as
monsters, levels, etc. can be added and a user-defined description
provided as well. Adding new indexes is simplified with an option for
adding a specific index within a portion of the editor by right-
clicking the name list or index number. The user can also load a
selected index in the notes database manager into its respective
portion of the editor where it can be modified there.
The patch feature reads a list of patches from the currently defined
patch server http:// or ftp:// location and can apply those patches to
the currently loaded ROM image.
A previewer for levels, event scripts and battle scripts lets the user
load a temporary ROM created from the current modifications in the
currently loaded ROM image into an emulator of choice (the only options
so far are ZSNES and SNES9X). Lazy Shell will create a save state
which, when loaded, will immediately enter the current level or
initiate the current event or battle script.
There are many more smaller features which are too numerous to list
here, and are scattered throughout the editor with the purpose of
easing the use of Lazy Shell and reducing the amount of work required
to complete a task.
That's what all of these extra features are here for. Not as bells and
whistles, but for making the hacking process less headache-inducing.

_______________________________________________________________________

UNSUPPORTED FEATURES
_______________________________________________________________________

Lazy Shell can NOT edit the new game intro sequence and graphics, the
end credits graphics, or end credits fonts. It cannot make any changes
to 65c816 assembly code in the ROM image (with some small exceptions).
Additionally, ROM expansion is also not supported by the application
due to the complications of the SA-1 chip in the game's engine.

_______________________________________________________________________

USING THE PREVIEWER
_______________________________________________________________________

Before using the previewer, do the following: 
1. Make sure all editor files are in the same folder. 
2. Configure the emulator's save-state folder to read/write to the same
folder as any loaded ROM. ZSNES by default already does this, and so
does Snes9x v1.43. However, later versions of Snes9x will by default
read/write to a "Save" folder created within the emulator's main
folder, and if not changed it will fail to load the preview save state.
Choose either the SNES9X or ZSNES emulator file to use when opening the
previewer. ZSNES will automatically load the generated save state when
the emulator is loaded from the previewer, but for SNES9X the F1 key
must be pressed manually to load the generated save state. If the
emulator has problems loading the save state, make sure the 2 steps
above have been completed. 
The latest version of ZSNES (v1.51 as of this release) is supported.
Snes9x v1.43 and/or its derivatives (rerecord, Geiger's debugger, etc.)
are preferred and should work. 

_______________________________________________________________________

IMPORTING CUSTOM WAVS
_______________________________________________________________________

TIPS: follow these steps to successfully import a .WAV file of your
choosing. Say you have a .WAV file, "MyWavFile.wav", that you wish to
replace one of the samples in this audio editor with. Here are the
steps you need to take: 
1. Download and install Audacity, a good free audio editing program.
     http://audacity.sourceforge.net/download/
2. In the Lazy Shell audio editor, export any sample to a file named
"OldSample.wav".
3. Open "MyWavFile.wav" into Audacity.
4. While in Audacity, copy the audio data (Ctrl+A, Ctrl+C). Close
Audacity.
5. Open "OldSample.wav" into Audacity.
6. While in Audacity, paste the copied audio data over the old data
(Ctrl+A, Ctrl+V).
7. Export to a .WAV file named "NewSample.wav".
8. In the Lazy Shell audio editor, import "NewSample.wav".
MAKE SURE THE SELECTED Hz SAMPLE RATE IS THE SAME AS THE IMPORTED .WAV
FILE.
The reason this is the only way to do it is because by using the same
exported file ("OldSample.wav") with the modified WAV data from
"MyWavFile.wav", it retains some obscure data from "OldSample.wav" in
"NewSample.wav" which is necessary to have in order to successfully
import a .WAV file.

_______________________________________________________________________

FILES IN ARCHIVE
_______________________________________________________________________

*** Make sure all files stay within the same directory as each other,
or there will be problems running Lazy Shell ***


"LAZYSHELL.exe"

The application.


"Lunar Compress.dll"

Generates automatically when needed.
This file is essential to Lazy Shell's functionality. It decompresses
and compresses the data that Lazy Shell modifies. It is needed to run
the Stats, Levels, and Sprites editors and must be in the exact same
directory as LAZYSHELL.exe. Without it, the program is almost
completely functionless.


"RomPreviewBaseSave.000, RomPreviewBaseSave.zst"

These generate automatically when needed.
Base savestates for SNES9X and ZSNES, respectively. These are needed
for previewing levels, event scripts, and battle scripts using either
ZSNES or SNES9X. To avoid complications, make sure the emulators are in
the same directory as everything else and that their save directories
are configured likewise.


"changes.txt"

All of the fixes, modifications, and additions since the earliest
versions are chronicled here.


"readme.txt"

This file.


_______________________________________________________________________

BUGS, ERRORS, EXCEPTIONS AND COMPLICATIONS IN FUNCTIONALITY.
_______________________________________________________________________

The editor may occasionally crash or not function properly due to
certain errors in the code (although with each new bugfix I am aiming
to completely remove the possibility of this ever happening). Please
remember that this is almost certainly the programmer's fault and NOT
yours, the user's. As often is the case, when an error surfaces or the
program behaves in a buggy fashion, the user tends to immediately feel
that they are to blame or the programmer is blaming them for the error.
This is not correct: almost all of the time, it's the programmer's
fault. Incidences when it might be the fault of the user may be due to
a corrupt ROM being loaded (a corrupt ROM basically means any SMRPG rom
which has been modified in any way, shape or form). This includes a ROM
edited by Lazy Shell, but errors may occur if a ROM has been modified
outside of Lazy Shell (ie. a hex editor), or often times in much older
versions of Lazy Shell (v2.5 seems to be popular among users who find
problems with v3.x).
If the editor crashes, make sure it is the latest version of Lazy Shell
by clicking the "(i)" button in the main window and comparing the
version there to the version posted on the home page
(http://home.comcast.net/~giangurgolo/smrpg/).
If you are using the latest version, make a new post in one of these
threads:
http://acmlm.kafuka.org/board/thread.php?id=7005
http://www.smwcentral.net/?p=viewthread&t=45572
Explain exactly what you did to produce this error or cause this
disfunctionality to occur, what editor it was in, what order you did
your actions to produce this error or disfunctionality, etc. Also, when
the editor bugs out, an exception prompt appears. If you can manage to
copy the error message after this:
************** Exception Text **************
and include it in your post, it will definitely help. But most
importantly, you must explain in your post what you did. Only posting
the exception text alone will not be adequate enough.
The suggestions above are only suggestions. Sometimes only five words
might be enough for me to quickly locate the bug and fix it. Remember,
an error or bug is most likely NOT YOUR FAULT. Don't be afraid to
report an error should it occur. I do notice and try to fix every bug
that is reported, so your post won't be in vain (unless you're making a
request for an addition to the editor, which I am now ignoring due to
how time-consuming it can be).

_______________________________________________________________________

SPECIAL THANKS
_______________________________________________________________________

Yakibomb - discovered many bugs with later versions
ElementalPowerStar - feedback, discovered several bugs
Bregalad - source code for BRR encoding and decoding
FuSoYa - for permission to use Lunar Compress.dll
KP9000 - beta testing, discovered many bugs with pre-release version
MathOnNapkins - helped with some coding
Alex Farber - MRU list manager
spel werdz rite - resolution for running program under a 64-bit OS
romhacking community - various feedback

_______________________________________________________________________

F.A.Q. (FREQUENTLY ASKED QUESTIONS)
_______________________________________________________________________

Q: The editor will not run at all.
A: You need .NET Framework 2 or higher installed on your system.

Q: I have no idea what this stuff means!
A: First, look in the glossary at the end of this readme file. Also,
   enable the help feature in the editor. If this feature is enabled,
   you'll be able to see a description of the property and what it does
   by moving the mouse over it. Click the (?) icon at the top of most
   editors or press F1 to enable/disable the help feature.

Q: I want to design or write a new _____. Where do I start?
A: If you're new to this, study the editor. Play around with it for a
   while before delving into a new project. Tweak or mess around with
   things that already exist (ex: scripts, levels, monsters, sprites,
   etc.) to gain an understanding of how everything works or operates.
   Then, when you want to start something new or original, use the
   "template-based" approach which I have always used in my own hacks:
   try thinking of something in the game that most closely resembles
   what you want to do or create, find that element in the editors,
   study it and it's properties/details, and use that as a template for
   your custom-made whatever. Example: copy event script commands into
   your own script that are similar, modify levels that are closest in
   resemblance to what you want to create, use existing monsters that
   are most characteristic of your custom monsters. The OREFFEZEPS
   hack, for example, was made entirely through this method of template
   hacking: I tweaked existing spells/attacks to varying degrees to
   make new original ones. The Bob-omb Mafia's forest levels used
   touched-up tilemaps of dummied maps which already existed (as well
   as the sewers levels).

Q: How do I add a new ally, item, monster, etc.?
A: You cannot add new indexes to any element, but you can replace the
   properties of existing indexes. That is the basic rule of hacking
   SMRPG. Many elements, like sprites, have dummied or unused indexes
   which you may edit or modify to "add" new stuff. Lazy Shell should
   not be viewed as an expansion tool but as a modification tool.

Q: Can Super Mario RPG be expanded?
A: Not with Lazy Shell, but I do believe there was an expansion hack
   project that successfully expanded the ROM. Lunar Expand is
   incapable of expanding SMRPG due to SA-1 chip complications.

Q: I'm looking specifically for _____ matching a name/description.
A: Most of the editors have a search field to the right of the index
   list, tagged with a magnifying glass icon. Use that to search for a
   specific index with a general description, name, or whatever.

Q: The editor crashed and/or corrupted the ROM and I lost my work!
A: First, try clicking "Ignore Error" and saving as a separate ROM.
   Then, try exporting the indexes that didn't glitch out into .dat
   files and import those into a fresh, uncorrupted ROM. In the future,
   enable the back-up feature in the settings: click the grey cog icon
   in the main window to open the settings. There are two types of
   back-ups: you can back-up on load and/or save. Thus you can roll
   back to an earlier edit before the ROM got corrupted by the program.

Q: I loaded a hack and one of the editors crashed.
A: It's possible the hack was written using an earlier version of Lazy
   Shell, particularly v2.x. Earlier versions of the program had badly
   written code and incorrectly saved certain types of data like
   sprites. Therefore newer versions will likely encounter errors with
   hacks made with earlier versions, and/or crash.

Q: What do these "B#,b#" things mean?
A: These are unknown bits. "B0,b0" means "Byte 0, bit 0" and refers to
   bit 0 in the first byte of the index's property data chunk. If
   you're confident you have discovered exactly what these bits do,
   feel free to post it in one of the bug report thread:
   http://acmlm.kafuka.org/board/thread.php?id=7005
   http://www.smwcentral.net/?p=viewthread&t=45572

Q: Is there free space in the ROM where I can insert graphics?
A: Only the space that you see in the editor's own graphics editor can
   be modified. You can import external images into it, or use the more
   powerful import features. For example, in the sprites editor.

Q: I have no idea how scripts work.
A: There are three types of scripts, each with their own scripting
   language: event, battle, and animation scripts. See the glossary for
   a more detailed explanation of scripts and how each different type
   of script works.

Q: Why do the images I import decrease in quality?
A: The number of colors are reduced to 15 (or 3 in 2bpp cases). So if
   you're trying to import a Caravaggio painting, you won't have much
   luck keeping the quality. Palettes are 16 or 4 colors, with the
   first color being reserved for transparent pixels.

Q: What's a .dat file?
A: Exported elements into external files that can be imported into
   other indexes of the same element.

Q: My ROM hack's checksum is bad/failed!
A: Only fresh, unsaved, unmodified ROMs will have a good checksum
   (0x3bb4). The ROM's checksum always fails after a save. It's not a
   bug because the slightest change in the ROM data will create a bad
   checksum. However if you are loading a fresh, supposedly unaltered
   ROM and get a failed checksum, then there may be issues.

Q: The editor crashes, regardless of what ROM is loaded.
A: Try resetting the settings. Click the cog icon in the main window
   and click "Default..." to reset the settings.

Q: Sometimes it asks to save even if I haven't done anything.
A: In some editors, like the sprites editor, switching between indexes
   will reassemble the last loaded index's data thus changing the data
   in the process. This is not a bug, and none of the properties are
   actually changed; just sometimes the raw hex data is slightly
   rearranged from the original order.

Q: What are Lazy Shell's most powerful features?
A: 1. The "Import Image(s)" functions in the sprites and effects
   editors allow the user to replace existing sprites with entirely new
   sprite animations from external image files. These were quite
   difficult to write the code for, but very rewarding in that they
   ultimately added a lot more muscle to the editor.
   2. The palette editor's "Adjust RGB" and "Effects" features let the
   user apply all kinds of effects to the colors, from RGB swapping,
   grayscale, contrast/brightness, colorizing, and more. You can create
   your own palette swaps of sprites, levels, etc. 
   3. The "New Font Table" feature in the dialogues editor in the font
   editor panel lets you replace the SMRPG font with any font installed
   on your system. 
   4. You can flip entire battlefields by just selecting the whole
   battlefield, right-click, and click "mirror" or "invert". 5. A
   built-in hex editor lets the user edit the raw hex data of several
   elements in the game.

______
ALLIES
¯¯¯¯¯¯
Q: Is it possible to add new allies?
A: No, you can only modify the existing five allies.

Q: Can I move another ally to the front to appear in the overworld?
A: Not in Lazy Shell, but with ASM hacking it is possible.

Q: Is it possible to start with other characters besides Mario?
A: You would have to switch the Mario sprite with another character's.

Q: Can I raise the XP to 5 digits and the coins to 4?
A: Not in Lazy Shell.

__________
ANIMATIONS
¯¯¯¯¯¯¯¯¯¯
Q: How do I add things to a weapon or spell script?
A: These are called commands in the animation script editor, and you
   cannot add new ones: only replace, move or edit existing ones.

Q: I want to add new commands.
A: You cannot do this, you can only replace, move or edit commands.

Q: How do I replace commands?
A: Select the command and at the bottom of the editor replace the first
   hex value with the opcode of the command you want to replace it
   with.

Q: Where's the list of command opcodes for animations?
A: Download the documents archive at:
   http://home.comcast.net/~giangurgolo/smrpg/smrpg_docs.zip
   The docs_ani-code.txt file contains all opcodes decoded thus far.

Q: How do I make custom items with custom animations?
A: The easiest things to customize in the animations editor are the
   sprites used, the sound effects, and dialogues. "Current object =
   sprite: whatever" "Current sprite: whatever" "Current action object
   = effect: whatever" "Playback sound: whatever" are among them. It's
   better to start simple before working with stuff like memory.

Q: I want to change a sprite in an animation to something else.
A: You'll want to modify the "Current object = sprite: whatever"
   commands. Modify its properties in the "CURRENT COMMAND PROPERTIES"
   panel on the right and click apply when you are finished.
   Alternatively you can change the hex values below.

Q: How do I make allies use enemy spells/attacks?
A: This would require comprehensive animation script editing, including
   but not limited to careful repositioning of many effect and sprite
   graphics and changing behavior of the sprites, as well as changing
   the object memory addresses, etc. Example: "Light Beam" is
   specifically scripted to shift leftwards towards the allies, so to
   make it realistically target the monsters the initial position and
   direction would need to be changed among other things.

Q: Where are the locations of the dummy spell animation scripts?
A: There are none; dummy spells (except for the 4 nameless ones used by
   Smithy) have no pointers and no scripts.

Q: How do you modify damage in an animation script?
A: I cannot say for sure, but none of the animation scripts appear to
   contain commands that modify damage, aside from the CC command found
   only in ally spells that append damage.

Q: How do I replace Mushroom and Scarecrow with new effects?
A: Most likely it requires ASM hacking, but as this is an unexplored
   territory in the SMRPG ROM I cannot be sure.

_______
ATTACKS
¯¯¯¯¯¯¯
Q: Can I make new "inflict functions" for a custom spell?
A: This involves ASM, thus you cannot do this in Lazy Shell.

_____
AUDIO
¯¯¯¯¯
Q: Is there any way to add music to a SMRPG Rom?
A: Not in Lazy Shell; you can only modify the audio samples used by the
   music SPCs and the SPC instruments and tracks, not add new ones.

Q: Can I add sound effects?
A: Sound effects are also SPCs that use audio samples. Therefore the
   answer is no, like the above question. Some sound effects are empty
   which could be used to "add" custom sounds.

Q: I changed the instrument but it's muted in-game!
A: If the instrument is included among the percussives, you'll have to
   change the instrument index for the percussive as well.

Q: I modified some sound effects, but I can't hear any changes.
A: If you're loading from a save state outside of Lazy Shell, then the
   audio memory contained in the save state won't have the changes you
   made. This is because during sound effect playback the data is read
   from the memory instead of directly from the ROM, and all sound
   effect data is stored to memory when the ROM starts. The previewer,
   though, will let you hear the changes since the modified data is
   stored into the preview save state's audio memory.

Q: I imported an MML script but the channels are out of sync.
A: Sometimes you must delete the first rests contained in the last 7
   channels.

Q: How do I transfer my work in the score writer to the SPC?
A: Export the staffs as scripts, then import the scripts into each of
   the individual channels. You'll have to manually add non-note
   commands in the track editor, like beat durations, volumes, etc.

____________
BATTLEFIELDS
¯¯¯¯¯¯¯¯¯¯¯¯
_________
DIALOGUES
¯¯¯¯¯¯¯¯¯
Q: I need some extra letters that my native language uses.
A: Use the empty slots in the font table. Letters that have accents or
   other diacritic marks can be drawn onto the new letters or imported
   as a new font table.

Q: How do I edit the names in the Level-up bonus screen?
A: This is found by selecting "Battle messages" in the battle dialogues
   editor.

_______
EFFECTS
¯¯¯¯¯¯¯
_____________
EVENT SCRIPTS
¯¯¯¯¯¯¯¯¯¯¯¯¯
Q: I want to change an NPC's sprite's mold or sequence.
A: This must be done in an action queue. First insert an action queue
   with "Objects" > "Action queue...". Select the NPC from the menu.
   Then add the command "Sprite sequence" > "Seq playback, sprite +=".

Q: Can I make an NPC change colors/palettes?
A: This must be done in an action queue, using one of three types of
   commands. In the "Palette" category, choose one of the commands to
   shift the NPC's sprite's palette index forward. View the palettes
   using the sprites editor.

Q: Is there a default event script that is always running?
A: Not by default, but you can point the level's event script to a
   separate synchronous event that contains the memory-checking
   commands you want to run.

Q: How do I make a custom ending?
A: You can't edit the default ending sequence with Lazy Shell, but you
   can write a custom event script to run instead as long as the Smithy
   battle sequence doesn't run.

Q: How do I change a character's animation during a dialogue?
A: Make sure the "Run dialogue: whatever" command has the dialogue
   property "asynchronous" unchecked so any following commands that
   would change a sprite's animation sequence or whatever will run
   while the dialogue is playing. Use the "Pause script, resume on next
   dlg page" commands to pause the script after the animation is
   complete.

Q: I told my script to jump to index $11C, #284.
A: "Jump to $whatever" commands do NOT jump to indexes, they jump to
   addresses as seen in the [] to the left of each command.

Q: How do I make _____ the only active party member?
A: Through an event script use the command "Add/remove party member" in
   the "Party members" category.

Q: When I press The X button the inventory menu does not appear.
A: It must be made accessible using one of the "Joypad enable" commands
   in the "Joypad" category.

__________
FORMATIONS
¯¯¯¯¯¯¯¯¯¯
Q: Some of the monsters in my formation are glitchy or discolored.
A: Too many monsters or having several large monsters in the same
   formation will overload the game's video memory and start smothering
   the graphics of other monsters and sprites. Do not put more than 6
   monsters in a formation.

Q: My monster inexplicably changes palettes in battle.
A: See the previous question.

_____
ITEMS
¯¯¯¯¯
Q: I made a DUMMY item a weapon, but it freezes when used.
A: That's because it doesn't have an animation script. Unfortunately
   you cannot create or edit scripts for the DUMMY items in the
   animations editor because the ROM provides no extra space for it.

Q: Can I make new "inflict functions" for a custom item?
A: This involves ASM, thus you cannot do this in Lazy Shell.

Q: In the shops, there are two "Buy only, no selling" options.
A: They both do exactly the same thing.

______
LEVELS
¯¯¯¯¯¯
Q: My custom level just appears black in-game, music playing.
A: Make sure the layer mask's boundaries are within those of your new
   custom level and that Mario appears within those boundaries.

Q: How do I add something like an NPC to a level?
A: The tabs on the left panel, ex: the "NPCs" tab, contain buttons at
   the top of the tab window that let you insert, delete, copy, etc.
   NPCs, events, exits, overlaps, or mods.

Q: I notice that the NPC # does not correspond to the sprite #.
A: The help labels for the editor explain this. Hit F1 in the editor or
   click the (?) icon at the top of the levels editor.

Q: The NPCs are not showing.
A: Make sure "Show NPC instance" is checked.

Q: Some tiles keep overlapping the NPCs.
A: Those tiles most likely have priority 1 enabled on one or more of
   their subtiles. To stop this, replace the solidity tile at that spot
   with a corresponding solidity tile with the "Priority 1 enabled for
   objects on tile" checked. Otherwise, it could be an overlap tile. To
   stop this, delete the overlap at that spot.

Q: When I stand on the edge of a block it overlaps Mario and NPCs.
A: Look for a solidity tile with "Priority 3 for object on edge"
   enabled in the solidity tile search and draw it there.

Q: How do I get an NPC to start a dialogue?
A: The dialogues for NPCs are initiated in the NPC's event script. Open
   the NPC's event script or assign a new script # and insert a "Run
   dlg: whatever" command.

Q: The NPC graphics are glitchy in-game.
A: You'll want to try changing the "Partition" property. You can look
   for the best partition index for the level by using the parition
   searcher (accessible with the "Partition" button). Keep in mind the
   game only has so much video memory to store the sprites to, so too
   many large NPCs may just be impossible to show.

Q: I have no idea how these partitioning properties work.
A: Unfortunately, this is a grey area in my knowledge, as I am not
   completely sure how the game organizes video memory for NPC sprites
   on loading a level. Clone sprites (ex: multiple townspeople in the
   town levels) should be first in the NPC collection, and a partition
   that has the clone VRAM properties should be set to store them (3 or
   4 sprites per row). Additionally, cloned sprites can only be
   gridplane format sprites. 3 sprites per row is set for 32px width
   sprites, 4 per row is for 24px width. Large sprites that overflow
   and write over cloned sprites might be fixed by setting clone buffer
   A to "empty buffer" to provide extra space for the large sprite.

Q: What does "Could not insert the _____" mean?
A: You'll need to delete other exits, events, npcs, or overlaps to
   insert new ones.

Q: Walking off an edge causes Mario to fall and get stuck.
A: Most likely you forgot to draw in a solidity tile somewhere. The
   isometric orientation of the solidity map sometimes makes it tricky
   to fill in all tiles. Also, make sure to seal off the edges of the
   walkable area with impassable tiles (usually with solid tile #255).

Q: How can I prevent a monster from reappearing after battle?
A: Look in the "AFTER BATTLE..." panel.

Q: Mario's Pipehouse is completely black.
A: For some reason the game applies the proper palette through ASM only
   for this level. If you want to see the level to edit it, change the
   palette to {21} temporarily then back to {50} when finished.

Q: I want a script to play infinitely in the background.
A: The level's "EVENT #" script must jump to a synchronous event that
   loops indefinitely during gameplay.

Q: I want to add a warp trampoline or pipe to another level.
A: Copy/paste a warp trampoline NPC from another level and edit the
   script to point to the desired target level. For the pipes, copy/
   paste the event field at the pipe's coords from another level and
   edit the script likewise. Keep in mind you will be changing the
   target level for the original trampoline/pipe you copied from the
   other level as well.

Q: I want to add a monster to the level that starts a battle.
A: Set the "NPC TYPE" to "Battle" and the "Pack #" to the desired pack
   index. Remember, this is a pack index; not a formation index. Packs
   are three formations each, where one of the three is randomly
   selected for battle.

__________
MAIN TITLE
¯¯¯¯¯¯¯¯¯¯
Q: How do I make my own title screen?
A: The easiest way is to make an image outside of Lazy Shell with a
   paint program (with the same dimensions as the title) and import the
   external image file in the Main Title editor. Right-click the layer
   3 title logo and import the image. Creating an entirely new title
   screen is a very limited operation as there's only enough space for
   any new graphics and/or palettes that are imported.

_____
MENUS
¯¯¯¯¯
__________
MINI-GAMES
¯¯¯¯¯¯¯¯¯¯
Q: How do I delete/add mushrooms to stages 1 and 2?
A: You can't, the mushroom count is fixed to 8 for both stages.

Q: Why aren't the rails arching in stage 4 like in-game?
A: This is probably an effect applied by some code in the assembly I am
   not familiar with. Thus the rails appear flat in the editor.

________
MONSTERS
¯¯¯¯¯¯¯¯
Q: On a game over, things keep happening in battle.
A: Most likely the monster who inflicted the fatal blow has several
   consecutive attacks that need to have conditionals added to its
   script. "If target alive: at least one opponent" should be added
   before the commands following the initial attack.

Q: Battle commands keep executing one after another without stopping.
A: You'll need to add a "Wait 1 turn, restart script" or a "Wait 1
   turn" command. The first is used within an "If" statement.

_______
SPRITES
¯¯¯¯¯¯¯
Q: How do I add custom sprites?
A: You can only edit existing ones. You can import sprite images
   through several methods: import image files into a graphic set,
   import image files into the molds, etc. I strongly recommend
   importing images into the molds as the easiest way to make your own
   custom sprites from external image files.

Q: I want to replace a sprite with a new one from image files.
A: Use the mold import feature: the black down arrow and white box [v]
   icon directly over the mold list tagged "Import Image(s)". You may
   import one or more images over the current molds or append to the
   current molds.

Q: I want to change a monster's sprite to a different one.
A: Monster sprites are found in sprite indexes 256-511. If you want to
   change a specific sprite to another existing sprite, you'll need to
   change the "Image" and "Animation" values to that other sprite's
   image and animation values.

Q: How do I add tiles to a sprite?
A: You can only do this for tilemap formatted molds, not gridplanes.
   Select the tiles in the mold's tileset you want to draw and use the
   pencil tool to draw them.

Q: How do I create new tiles to draw with?
A: Once again, you can only to this for tilemap molds. Click "Insert
   new tile" (paper icon) at the top of the panel on the far right and
   manually set the subtiles.

Q: Are there any unused animation sequences?
A: http://tcrf.net/Super_Mario_RPG:_Legend_of_the_Seven_Stars Scroll
   down to the "Unused _____" sections.

Q: I get glitchy sprites when I load a save state.
A: This is not a bug with the editor nor the emulator. It is simply a
   matter of unsychronized memory: the newly edited ROM data for
   sprites is not sychronized with the save-state memory thus the
   glitchy sprites. This can be remedied by re-entering the area, which
   refreshes the memory.

Q: I want to make _____ a different color, or Mario without a hat.
A: Edit the palette and edit the graphics with the respective editors.

Q: Battle portraits appear discolored in the editor.
A: It appears like that in the editor, but the assembly manually
   applies the correct palette to the battle portraits.

Q: I can't find some sprites, even in the search.
A: Some sprites are within other sprites, nestled among the mold
   indexes. The nok-nok shell, for example, is molds 2-4 within the
   lazy shell sprite.

__________
WORLD MAPS
¯¯¯¯¯¯¯¯¯¯
_______________________________________________________________________

GLOSSARY
_______________________________________________________________________

"2bpp & 4bpp"
These mean "2 bits per pixel" and "4 bits per pixel", and refer to the
format that graphics are in. Graphics in 2bpp format can only use a
maximum of 4 colors, whereas 4bpp graphics can use up to 16 colors. The
Big Boo in Bowser's Terrorize spell only needs 4 colors, thus the
graphics are in 2bpp format to conserve ROM space.

"action queue"
A group of commands in an event script which behave like a custom
embedded action script, containing movement commands for a given NPC.

"action script"
A script comprised of commands which create a series of movements
ascribed to an NPC in a level. A townsperson walking back and forth
randomly is controlled by an action script. A wiggler's unique behavior
is governed by a special action script.

"AMEM"
1. Audio memory, used to store SPC and sample data.
2. Animation memory, used in animation scripts to store sub-routine
flags.

"animation script"
The scripts which animate everything seen in battle. Attacks, spells,
events, etc. are all governed by animation scripts. Animation scripts
are, like battle and event scripts, written in their own scripting
language. The animation scripting language is the most complicated and
difficult to write for, as they tend to jump around wildly throughout
the current bank by means of animation packets and memory-checking
mini-scripts. The animations editor contains many powerful features,
but unfortunately also many limitations on innovation. Some scripts are
painfully large because many of the mini-scripts within a script are
repeated numerous times.

"ASM"
This is essentially the game's raw code which runs when the game is
started. SNES games are generally written in assembly. Most everything
that Lazy Shell modifies is arranged in data chunks and dynamic scripts
and does not involve assembly programming code. Anything Lazy Shell is
incapable of modifying, outside of the defense timing values. "ASM
hacking" is modifying the assembly code outside of Lazy Shell.

"bit"
These behave like flags or switches that are turned on or off. The game
knows what has been done so far in the game because of the bits that
are set or clear. Defeating the Hammer Bros. sets a bit. Each time you
enter that level, an event script checks if the switch is turned on in
order to determine whether or not to show the Hammer Bros NPC and
execute the associated cut scene. The "Jump" bit is already switched on
when you start a new game, and can be switched off in the allies
editor. Checkboxes in the editor are usually associated with bit-wise
data while number values are byte-wise. Example: monster HP is read
byte-wise while elemental weaknesses are read bit-wise.

"command"
These are what comprise the many scripts in the ROM. Example: in the
first encounter with Terrapins, an event script contains a command
"Engage battle, pack: 1, battlefield: [07]" which initiates the battle
with the Terrapins.

"element"
The different things in the ROM that Lazy Shell can modify. The
individual editors can usually edit one or two types of elements.
Elements often have multiple indexes. Monsters are an element that has
256 indexes (0 to 255). Levels are another element that contains 510
indexes, event scripts have 4096 indexes.

"event script"
The game basically progresses by event scripts. Everything you see
happening in a level that isn't controlled by the player (ie. Mario) is
executed by the commands in an event script. Scripts are usually
initialized by a trigger in the level, when Mario comes into contact
with either an event field or an NPC. An event script is also
automatically initialized every time when entering a new level. This
script is the level's own event script (set with the "EVENT #") that
usually contains commands for preparing primarily NPC and memory
related elements before the level is completely loaded.

"event field"
A field which, when Mario touches it, will initiate an event script.
Event fields can actually be made to behave exactly like exit fields
and they often are when other commands must be executed. In these cases
the scripts contain a command pointing to the target level.

"exit field"
A field which, when Mario touches it, will load a new level. Other ROM
editors sometimes call these "entrances".

"field"
An invisible thing in a level that triggers an event or operation when
Mario touches it. Event and exit fields, for example.

"hex"
A numeric system who's places are based on 16's and not 10's like in
"decimal". With just one decimal place, you can count up to 9, but in
just one hexadecimal place you can go up to 15. This is because the
numbers 10-15 are A-F respectively. Thus in just two hexadecimal places
the numbers can go up to 255, which is why this number is so common
throughout the editor. With three hex places, 4096 is highest. The
editor displays only memory addresses in hex format (eg. 00:709F) with
all other elements being in decimal.

"index"
Example: TERRAPIN is an index in the monster element (index 0). The
level for Mario's Pad is index 16 in the levels element, etc. You can
modify the properties of each index by switching to or among them in
the editors using either its drop down list or immediately with its
numeric up/down.

"isometric"
The pseudo 3-D orientation of Super Mario RPG. Other games like Final
Fantasy Tactics and Tactics Ogre are isometrically oriented. Something
is called "isometric" when, instead of being in a flat gridplane, it is
shaped like a diamond and arranged at an angle. Nevertheless Mario
RPG's levels are drawn with square 16x16 tiles and not diamond-shaped
tiles, whereas the solidity tiles are.

"layer"
SMRPG uses five layers: L1, L2, L3, NPCs, BG. By default, NPCs appear
on top of all other layers (excluding priority 1 tiles). After that, L1
appears on top, followed by L2, L3, and BG. The BG is simply the solid
background color behind everything else.

"level"
The places and areas you can enter in-game. Many ROM editors also refer
to these as "locations".

"memory address"
A "slot" where the game stores information that it needs to access
later. Example: the 30 slots for items (7F:F882 to 7F:F89F) have memory
addresses. The memory addresses are the items. Completed events, like
defeating the Hammer Bros (00:7052, bit 6), are stored as a bit in a
memory address. A memory address has 8 bits.

"mode 7"
Mode 7 is a format in SNES which can display a 2D map in a 3D manner.
The 1st and 2nd mine cart levels are in mode 7 format, for instance. It
can also do transformations such as the stretching effect on the world
maps.

"mods"
These can change the tiles or solidity tiles of a level. In the levels
editor, there are two types of mods: tile mods and solidity mods.
Example: Croco blowing up the wall in Moleville Mines. Example: the
green button in Rose Town removing/adding stairs outside.

"mold"
An arrangement of tiles that form a complete image (ie. a sprite
image). A mold is similar to the orientation of a tilemap, except that
sprite molds can either be in a format that arranges the tiles in a
grid (gridplane) or a coordinate system (tilemap). One or more molds
may be contained in a sprite or effect and are used to create a
sequence animation.

"NPC"
Abbreviation for "non-playable character". They are basically the
sprites seen in-game in a level, excluding battles, but with a number
of properties all described by the help tags in the levels editor. An
NPC is not the same as a sprite, it merely has a sprite index assigned
to it among a bunch of other attributes.

"OMEM"
Object memory, referring to the object packets used in animation
scripts. Each time a $68 or $64 command is called a memory address
block is accessible exclusively by the current object, assigned by the
parameters $68 or $64 commands.

"palette"
A set of colors used to draw something. Almost all palettes are 16
colors, except for layer 3 graphics, fonts, and some effect graphics.
SNES games like SMRPG are somewhat limited in the number of colors they
can display, which is why imported image files can decrease
dramatically in quality. Many paint programs have features which can
decrease the color depth of an image to 16 colors.

"priority"
A tile or sprite's priority determines how it will overlap other tiles
or how other tiles will overlap it. "Priority 1" means someting will
overlap all other parts of a level that aren't also set to priority 1.
Higher priority numbers mean it will appear under other things.
Highlighting priority 1 tiles in a level will show what parts of the
level will typically overlap Mario and NPCs.

"script"
A list of 0 or more commands that carry out an action on screen in the
game, such as Toad running into Mario near the beginning of the game,
or Bowser's "Crusher" battle animation, or The Big Boo randomly
selecting either "Lighting Orb" or "Bolt" to use in battle. Examples:
event scripts, action scripts, battle scripts, animations.

"sequence"
An animation. Two types of elements use sequences: sprites and effects.
A sequence is a collection of frames. Each frame is assigned a mold
index from the sprite or effect's mold collection and plays back the
frames as a fully animated sequence.

"solidity"
Also varyingly called called "physical field" or "collision tiles". The
physical properties of something, like a map. Levels in most games have
solidity maps, but usually as tilesets associated with the regular
graphical tileset. As tilesets in SMRPG are grid-based and not
isometric like the solidity tiles, the tilemaps and not the tilesets
have their own solidity maps.

"tilemap"
An example: Levels are 64 rows of tiles, each row is 64 tiles. Many
sprites are "tilemaps" themselves, but here each tile would have its
own coordinate instead of being placed in a grid like levels. Do not
mistake tilemaps with tilesets. "tileset" A collection or "palette" of
tiles used to draw to a tilemap.

"trigger"
When Mario comes into contact with something like an NPC or event
field, and an event script is initiated, it is "triggered". NPCs have a
trigger property which sets the conditions for the script's initiation
when Mario collides with it.

_______________________________________________________________________

EDITORS
_______________________________________________________________________

______
ALLIES
¯¯¯¯¯¯
The allies editor contains two subwindows: new game stats and
level-ups.
   
   ______________
   NEW GAME STATS
   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯
   In the new game stats subwindow the starting stats for all 5 characters
   can be modified, along with the starting items, special items, and
   equipment. Starting coins, flower points, and frog coins can be
   changed, too. In addition to this, the universal defense timing lets
   the user change the timing properties of a defense against a monster
   attack.
   The current character selected is the base index for all of the
   properties in this subwindow except for those in the "Inventory Slot
   Items", "New Game Status" and "Defense Timing" boxes.
      
      __________
      Characters
      ¯¯¯¯¯¯¯¯¯¯
         
         ***TOOLTIPS***
         [Character]
           The character to edit by name.
         [Character Name]
           The character's displayed name in all menus.
         [Level]
           The initial level of the currently selected character when (s)he
           becomes active.
         [Attack]
           The initial attack power of the currently selected character when (s)he
           becomes active.
         [Defense]
           The initial defense power of the currently selected character when
           (s)he becomes active.
         [Magic Attack]
           The initial magic attack power of the currently selected character when
           (s)he becomes active.
         [Magic Defense]
           The initial magic defense power of the currently selected character
           when (s)he becomes active.
         [Speed]
           The initial speed of the currently selected character when (s)he
           becomes active.
         [Weapon]
           The initially equipped weapon of the currently selected character when
           (s)he becomes active.
         [Armor]
           The initially equipped armor of the currently selected character when
           (s)he becomes active.
         [Accessory]
           The initially equipped accessory of the currently selected character
           when (s)he becomes active.
         [Experience]
           The initial experience of the currently selected character when (s)he
           becomes active.
         [Current HP]
           The initial current HP of the currently selected character when (s)he
           becomes active.
         [Maximum HP]
           The initial maximum HP of the currently selected character when (s)he
           becomes active.
         [New Game Ally Spells]
           The initial spells known by the currently selected character when (s)he
           becomes active.
      
      ________
      New Game
      ¯¯¯¯¯¯¯¯
         
         ***TOOLTIPS***
         [Coins]
           The amount of coins in the inventory at the start of a new game.
         [Frog Coins]
           The amount of frog coins in the inventory at the start of a new game.
         [Current FP]
           The current FP at the start of a new game.
         [Maximum FP]
           The maximum FP at the start of a new game.
         [Inventory Slot #]
           The slot is the "open slot" in an inventory to store an item.
           For example, the equipment and items have 30 slots, therefore they can
           store 30 items in slots 0 to 29. By default, there are actually 29 open
           slots in the game, due to the default trash can occupying slot #29).
         [Item]
           The item in the currently selected slot of the item inventory at the
           start of a new game.
         [Special Item]
           The item in the currently selected slot of the special item inventory
           at the start of a new game.
         [Equipment]
           The item in the currently selected slot of the equipment inventory at
           the start of a new game.
   
   _________
   LEVEL-UPS
   ¯¯¯¯¯¯¯¯¯
   The level-ups subwindow allows the user to change the level-up status
   increments as well as bonus increments. A field for changing the spells
   learned at level-up is also available. The current character selected
   is the base index for all of the properties in this subwindow
      
      ***TOOLTIPS***
      [Character]
        The character to edit by name.
      [Level #]
        The character's level to edit by number. All 5 characters have a total
        of 29 levels (levels 2 through 30) each.
        The level selected is the base index for all of the properties in the
        "Level-up Status Increments", "Level-up Bonus Increments" and "Level-up
        learned spell" panels.
      [Experience]
        The amount of experience the currently selected character needs to
        reach the currently selected level.
      [HP+]
        The amount the currently selected character's HP will automatically
        increase when the character reaches the currently selected level during
        a level-up.
      [Attack+]
        The amount the currently selected character's Attack Power will
        automatically increase when the character reaches the currently
        selected level during a level-up.
      [Defense+]
        The amount the currently selected character's Defense Power will
        automatically increase when the currently selected character reaches
        the currently selected level during a level-up.
      [Mg. Attack+]
        The amount the currently selected character's Magic Attack Power will
        automatically increase when the currently selected character reaches
        the currently selected level during a level-up.
      [Mg. Defense+]
        The amount the currently selected character's Magic Defense Power will
        automatically increase when the currently selected character reaches
        the currently selected level during a level-up.
      [HP+]
        The amount the currently selected character's HP will increase if the
        "HP" bonus option is chosen when the currently selected character
        reaches the currently selected level during a level-up.
      [Attack+]
        The amount the currently selected character's Attack Power will
        increase if the "POW" bonus option is chosen when the currently
        selected character reaches the currently selected level during a
        level-up.
      [Defense+]
        The amount the currently selected character's Defense Power will
        increase if the "POW" bonus option is chosen when the currently
        selected character reaches the currently selected level during a
        level-up.
      [Mg. Attack+]
        The amount the currently selected character's Magic Attack Power will
        increase if the "S" bonus option is chosen when the currently selected
        character reaches the currently selected level during a level-up.
      [Mg. Defense+]
        The amount the currently selected character's Magic Defense Power will
        increase if the "S" bonus option is chosen when the currently selected
        character reaches the currently selected level during a level-up.
      [Level-up learned spell]
        The spell learned when the currently selected character reaches the
        currently selected level during a level-up.
__________
ANIMATIONS
¯¯¯¯¯¯¯¯¯¯
Animation scripts are all battle-oriented scripts which include all
spell, attack, item, entrance, event, and behavior animations. This
includes all sprite behavior in battle--allies, monsters, spells, etc.
This editor is somewhat similar to the event scripts editor, but
several distinctions must be made.
   
   1. The inability to add or delete commands to or from animation
   scripts, due to the complicated organization of the data into external
   rather than internal subroutines.
   
   2. The flow layout orientation of subroutines: event scripts are
   straightfoward and linear, while animation scripts are displayed as a
   multi-level tree where sub-routines are displayed as child nodes.
   Subroutines can be called multiple times in the same script, hence the
   fact that changing a command's properties can alter other nodes as
   well.
   
   3. A greater dependency on memory slots also contributes to the
   difficult nature of this editor. Different memory values can affect
   subsequent sub-routine pointers, such as the $68 or $64 command which
   relies on index pointers.
   
   4. Memory can be accessed as two types: AMEM (animation memory) and
   OMEM (object memory). AMEM is the primary memory type, accessible at
   all levels, while OMEM is linked to the current object, assigned by the
   $68 or $64 commands and accessible only in the synchronous object
   routine.
   
   ***TOOLTIPS***
   [Category]
     Select the animation script category.
   [Animation Index]
     Select the animation to load.
   [Command Tree]
     The collection of commands that comprise the animation script. Nodes
     are drawn in a hierarchical format for subroutines and animation
     packets used by the script. Check the nodes to move commands up or
     down--they cannot be delete, copied or pasted, however.
     Click a node to edit its properties in the panel on the right. Note
     that not all commands have been documented nor have their parameters
     been disassembled to a user-friendly GUI.
   [Apply]
     Applies all changes made to the selected command.
   [Empty]
     Fills the animation opcode and parameters with 1-byte $0A NOOP
     commands. This can be used to "delete" a command or replace it with a
     new one.
   [Apply]
     Apply all changes made to the selected command's raw hex data.
_______
ATTACKS
¯¯¯¯¯¯¯
The attacks editor contains two subwindows: spells and attacks.
   
   ______
   SPELLS
   ¯¯¯¯¯¯
   The spells editor can modify all spell properties. These properties are
   applied to either in-battle usage, overworld usage or both.
   Spell #0-63 are ally spells, while all other spells are monster spells.
   Both are exclusively limited to usage by either allies or monsters. Any
   attempts to assign monster spells to allies or vice versa will most
   likely cause a glitch, and is not recommended.
      
      ***TOOLTIPS***
      [Spell Index]
        Select the spell to load.
      [Icon]
        The spell's icon as seen preceding its displayed name in all menus.
        Only ally spells have icons.
      [Spell Name]
        The spell's displayed name in all menus.
      [FP Cost]
        The amount of FP subtracted from the user's current FP when the spell
        is used.
      [Magic Power]
        The base damage or heal amount caused by the spell.
      [Hit Rate%]
        The spell's hit rate percent, ie. the probability out of 100 the spell
        will hit its target.
      [Attack Type]
        The spell's attack type, ie. the spell will either cause damage or heal
        its target. This property can be ignored depending on the value of
        "Inflict Function".
      [Effect Type]
        The effect type, ie. whether or not the spell will inflict or nullify
        (an) effect(s). Example: Poison Gas inflicts the Poison effect on the
        target(s) and Group Hug nullifies all adverse effects on the target(s).
        If set to {NONE} then anything checked under "Effect" is ignored.
        Likewise, this property is ignored if nothing under "Effect" is
        checked.
      [Inflict Function]
        The inflict functions are specialized to certain spells, eg. "Scan/Show
        HP" is specialized to Psychopath and "Jump Power" is specialized to
        Jump. Some of these will cause the "Attack Type" to be ignored, ie. the
        spell will neither cause damage nor heal (eg. Psychopath).
      [Inflict Element]
        The element assigned to the spell. If the target has a strength against
        the element, the base damage of the spell will be halved. If the target
        has a weakness against the element, the base damage will be doubled. If
        the target has a nullification property against the element, it will
        yield 0 damage.
      [Other Properties]
        "Check Caster/Target Atk/Def" will add to or subtract from the base
        damage or heal amount of the spell based on the target's attack and
        defense power instead of its magic attack and magic defense power. By
        default, no spells have this property enabled.
        "Ignore Target's Defense" will not subtract the target's magic defense
        power from the spell's base damage or heal amount (ie. the spell's
        magic power).
        "Check Mortality Protection" is redundant because the game engine
        always checks anyways. Only the dummied Knock Out spell has this
        enabled by default.
        "Usable in overworld menu" allows the spell to be used out of battle,
        ie. the overworld menu. This is normally reserved for healing spells.
        "9999 Damage/Heal" will kill the target in one strike, if the spell
        does not miss. Only the dummied Knock Out spell has this enabled by
        default.
        "Hide Battle Numerals" will hide the damage or heal amount total (ie.
        the numbers shown after an attack). This is generally used by spells
        that cause 0 damage and are only effect-based spells such as Sleepy
        Time, to avoid a redundant "0" appearing.
      [Description]
        The description that appears in the lower-right corner of the overworld
        menu when the cursor is on the spell.
      [Targetting]
        "Other Targets" will limit the target to a single ally or enemy. This
        must NOT be checked with "Entire Party".
        "Enemy Party" will allow the spell to target the opposing party.
        "Entire Party" will cause the spell to target all members of either the
        ally party or enemy party. This must NOT be checked with "Other
        Targets".
        "Wounded Only" will limit the target to wounded members, ie. members
        with currently 0 HP.
        "One Party Only" will limit the target to only one party. By default,
        all usable spells have this property enabled. Uncheck at your own risk!
        "Not Self" will limit the target to other allies only, and the caster
        is untargettable. By default no spells have this checked, although the
        Mushroom item that turns the user into a mushroom has this property
        enabled.
      [Status <. . . .>]
        The effect inflicted or nullified on a target, eg. Poison Gas inflicts
        Poison on a target, while Group Hug will nullify all effects a target
        is afflicted with except "Invincible". These properties are used based
        on the value for "Effect Type".
      [Effect <. . . .>]
        The status of a target is either lowered or raised by 50%, depending on
        the value for "Effect Type". If the value for "Effect Type" is set to
        "Inflict" then the target's stats will be raised 50%. If "Effect type
        is set to "Nullify" then the target's stats will be lowered 50%.
        Example: Geno Boost by default raises the target's Attack and Defense
        power by 50% (eg. if the attack and/or defense power of the target is
        100, then it becomes 150). Shredder by default lowers the target's
        Attack, Defense, Magic Attack, and Magic Defense power by 50% (ie. it
        halves them).
      
      ______
      Timing
      ¯¯¯¯¯¯
         
         ***TOOLTIPS***
         [Timing Frame Span]
           The # of frames from the start of the spell's animation when the user
           can trigger level 1 timing. The spell's damage will be increased by 50%
           if an ABXY button is pressed within this range. 
         [LV2 Timing START]
           The frame # from the start of the spell animation where the level 2
           timing begins. Example: the default value for Jump is 39. This means
           that if an ABXY button is pressed after 39 frames have passed from the
           start of the Jump animation (ie. when Mario jumps off the ground) the
           damage is increased by at least 100% (ie. doubled).
         [LV2 Timing END]
           The frame # from the start of the spell animation when the level 2
           timing ends. Example: the default value for Jump is 44. This means that
           if an ABXY button has NOT been pressed after 44 frames have passed from
           the start of the Jump animation (ie. when Mario jumps off the ground)
           the opportunity to increase the damage by 100% (ie. doubled) is gone.
         [LV1 Timing END]
           The frame # from the start of the spell animation where the level 1
           timing ends. Example: the default value for Jump is 45. This means that
           if an ABXY button has NOT been pressed after 45 frames have passed from
           the start of the Jump animation, the opportunity to time the attack for
           any damage increase is gone.
         [Level 2 Frame]
           The frame # from the start of the spell animation when, if the button
           is held to this point, the damage is increased by at least 50%. This is
           by default around when the first red star appears on screen.
         [Level 3 Frame]
           The frame # from the start of the spell animation when, if the button
           is held to this point, the damage is increased by at least 75%. This is
           by default around when the second red star appears on screen.
         [Level 4 Frame]
           The frame # from the start of the spell animation when, if the button
           is held to this point, the damage is increased by at least 100%. This
           is by default around when the third red star appears on screen.
         [Charge Overflow]
           The frame # from the start of the spell animation when, if the button
           is held to this point and beyond, the damage "overflows" and is reset
           to the base value, ie. no damage increase.
         [Orb Frame Span]
           The "speed" of the firing, or the # of frames the player must wait
           between button presses in order to "fire" another fireball. NOTE:
           values less than the default may cause the game to freeze if the button
           is consistently pressed for each frame span between fireballs.
         [Maximum Orbs]
           The maximum number of orbs the player can fire before the spell is
           over. The accumulative damage is increased with each fireball, so
           lowering/raising this value will affect the maximum accumulative damage
           as well.
         [Timing Frame Start]
           The frame # from the start of the spell animation when the player has
           the opportunity to rotate the directional pad to increase damage.
         [1/4 Rotations]
           The maximum number of quarter rotations (a quarter rotation would be,
           for example, from DOWN to DOWN-LEFT to LEFT) allowed to increase
           damage. Raising/lowering this value will affect the maximum
           accumulative damage.
         [Maximum]
           The maximum number of times the player can execute another "jump" or
           "star rain" by timing it. Values above 127 will likely cause anomalies
           (ie. the spell caster might only be able to do 13 jumps, even if the
           maximum is set to 200 for example).
         [#]
           The instance selected. The rest of the instances have the same
           "Instance Frame Duration" as the last one in the list of instances. For
           example, Super Jump instances 14 through 199 will have the same
           "Instance Frame Duration" as instance 13. NOTE: star rain's "Instance
           Frame Duration" is the same for all instances, so there isn't a list
           for them.
         [Frame Span]
           The # of frames before either Mario or the Star lands on the target
           that the player is able to time the spell to increment damage and allow
           another instance to be timed. NOTE: star rain's "Instance Frame
           Duration" is the same for all instances, so there isn't a list for
           them.
         [Maximum power-ups]
           The maximum number of times the player can press an ABXY button to
           increase damage during the spell animation.
   
   _______
   ATTACKS
   ¯¯¯¯¯¯¯
   Attacks used by monsters can be modified in the attacks editor on the
   right. These are all exclusively in-battle monster attacks. Many
   monster attacks have no name, and even if given one it will not be
   displayed because the attack animation code does not enable it. Several
   attacks are unlabelled and distinguishable only by their appearance and
   what uses them.
      
      ***TOOLTIPS***
      [Attack Index]
        Select the attack to edit by number.
      [Attack Name]
        The attack's name displayed at the top of the screen when executed by
        the monster. Many monster attacks have no name, and even if given one
        it will not be displayed because the attack animation code does not
        enable it.
      [Hit Rate%]
        The attack's hit rate percent, ie. the probability out of 100 the
        attack will hit its target.
      [Attack Level]
        The attack level multiplies the base damage of the attack (ie. the
        monster's attack power) by a number.
        An attack level of 0 will yield base damage. 
        An attack level of 1 will multiply the base damage by 1.5. 
        An attack level of 2 will multiply the base damage by 2. 
        An attack level of 3 will multiply the base damage by 4. 
        An attack level of 4 will multiply the base damage by 8. 
        An attack level of 5 will multiply the base damage by 16. 
        An attack level of 6 will multiply the base damage by 32. 
        An attack level of 7 will multiply the base damage by 64.
        Example: if the monster's attack power is 6, and the attack level of
        the attack is 7, then the damage will be increased to 384 (ie. 6 x 64).
      [Effect Inflict]
        The effect inflicted on a target, eg. S'crow Bell inflicts Scarecrow on
        a target, Thornet inflicts Poison, etc.
      [Status Up]
        The status of a target is raised by 50%.
        Example: Valor Up by default raises the target's Defense and Magic
        Defense power by 50% (eg. if the magic defense and/or defense power of
        the target is 100, then it becomes 150). Vigor up! by default raises
        the Magic Attack and Attack power by 50%.
      [Attack Type]
        "9999 Damage" will kill the target in one strike, if the attack does
        not miss.
        "No damage" will yield 0 damage to the target (both "No damage"
        properties are exactly the same, but different bits).
        "Hide Battle Numerals" will hide the total damage (ie. the numbers
        shown after an attack). This is generally used by attacks that cause 0
        damage and are only effect-based attacks such as S'crow Bell or "9999
        damage" enabled attacks such as Scythe, to avoid a redundant "0" or
        "9999" appearing.
_____
AUDIO
¯¯¯¯¯
Two subwindows are included in this editor: the samples and SPC
editors.
   
   _______
   SAMPLES
   ¯¯¯¯¯¯¯
   A sample is simply a raw audio sound that the SPCs use during playback.
   It is NOT to be confused with a sound effect like Mario's jump: it
   should be viewed as a single instrument sound used by songs and sound
   effects. It is compressed in BRR format, the traditional SNES format
   for audio samples. The first 16 samples are used primarily by the SPC
   sound effects (ex: Mario's jump). The remaing samples are all
   instruments used almost exclusively by SPC Music Tracks.
      
      ***TOOLTIPS***
      [Sample Index]
        Select the sample to load.
      [Relative Frequency]
        This is used to tune a sample sound to the pitch of A. Relative
        frequency is the frequency of the sample in distance by hertz from a
        base 32000hz. The difference, however, is not a simple matter of
        addition/subtraction. The formula for calculating final frequency is as
        follows:
        If the relative frequency is positive: 32000 x 2^(RelFreq / 256 / 12).
        If the relative frequency is negative: 32000 / 2^(RelFreq / 256 / 12).
        So multiply or divide 32000 by 2 to the power of the final quotient of
        what's between () to get the final frequency of the sample.
      [Relative Gain]
        Simply put: the volume change from the base volume.
      [Loop Start]
        If the sample loops this is the location in bytes it loops back to. If
        set to 0 or a value higher than the BRR sample's total size in bytes,
        it loops back to the beginning. This value must point to the start of a
        chunk, in other words it must be divisible by 9--the size of each chunk
        in a BRR sample's data.
        The loop start point is indicated in the wavelength image by a vertical
        gray line.
   
   ____
   SPCS
   ¯¯¯¯
   Three types of SPCs exist in SMRPG: SPC Music Tracks, Event Sound FX,
   and Battle Sound FX.
      
      ***TOOLTIPS***
      [SPC Type]
        Select the type of SPC to load.
      [SPC Index]
        Select the SPC to load.
      [Instruments]
        A collection of instruments used by the SPC. Only music tracks can have
        a collection of instruments, up to 20 maximum. Each instrument is
        assigned a sample and base volume. Remember that the instruments
        assigned in the track commands must be in this collection, otherwise
        they'll be muted. Changing an instrument in this list will
        automatically synchronize all sample set commands in the channel tracks
        that use the instrument's sample. Thus manual updating in the track
        editor is unnecessary.
      [Delay Time]
        Higher values set greater distances between each echo.
      [Decay Ratio]
        Higher values create a longer lasting echo.
      [Echo Volume]
        The intensity, or strength, of the echo. Higher values mean stronger
        echoes.
      [Percussives Collection]
        The percussives collection is a collection of percussive instruments,
        each assigned a sample, pitch, volume, and a different pitch index.
        Since there are only 12 pitches (C to A#) only up to 12 percussives can
        logically be used, and all 12 must have different pitch indexes.
      [Pitch Index]
        This is not the actual pitch of the percussive (which is below) but the
        pitch index assigned to it. If a channel is in percussive mode, then
        the notes will play an instrument in the percussive list based on the
        note's pitch corresponding to the percussive's pitch index.
        Example: if a percussive has a pitch index of B, then for any B notes
        played while in percussive mode it will play that percussive's sample.
        All percussives in the collection must have different pitch indexes.
      [Pitch]
        Whenever a percussive is played, this is the fixed pitch it will play
        at. The percussive's pitch cannot be changed during the song. If you
        want to play the same percussive instrument at different pitches, you
        must have more than one percussive in the collection with the same
        sample but different pitch index.
      [Volume]
        Base volume of the percussive.
      [Speaker Balance]
        The percussive's balance between the two speakers.
      [Select Command]
        Select from a list of SPC commands to insert, with the button on the
        right.
      
      ________________
      SPC Music Tracks
      ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
      SPC music tracks are the songs used in the game. The instruments box
      contains a list of instruments which are given a sample and a base
      volume. These are the instruments accessed by the track data to play
      back the sequence of notes heard in a song. Any instrument which
      accesses a sample index higher than 15, however, must be set in a
      channel and must be in this list to be heard at all, therefore changing
      an instrument in the track editor box to the right to an instrument NOT
      in this box will create nothing but silence for that channel.
      
      ________
      Sound FX
      ¯¯¯¯¯¯¯¯
      Event and battle sound effects use the exact same types of commands as
      SPCs, except they only use two channels (6 and 7), have no instrument
      or percussive collections and can only use samples 0-15 with some
      exceptions. Those exceptions are if a sample index higher than 15 is
      set in a sound effect's track data, that instrument must be in the
      currently playing song's instrument collection to be heard at all.
      Examples include the Tadpole Pond steel drum note sounds on the staff,
      or jumping on the organ in the sanctuary.
      
      ______________
      Channel Tracks
      ¯¯¯¯¯¯¯¯¯¯¯¯¯¯
      Channel track commands, in simple terms, are the notes and note
      properties of a song. They are displayed on a channel-by-channel basis
      in the channel track editor. Music tracks can have anywhere between 0
      and 8 active channels, while sound effects only two. Channels run in
      syncronization with one another. Each channel's commands run in
      straight line, in similar nature to the commands in other script
      editors.
      
      ____________
      Score Viewer
      ¯¯¯¯¯¯¯¯¯¯¯¯
      The score viewer, only functionable with the music tracks, displays the
      channel tracks in notation form. Notes and rests can be clicked to jump
      to the corresponding command in the track editor on the right. Sample
      and percussive mode changes are indicated by icons, and notes in
      percussive mode are identifiable by the x note heads. Staff attributes
      like time signatures, note spacing, and others are user-defined but do
      not affect the ROM if modified. Repeats viewable in the track editor
      are not incorporate in the score viewer (ie. no repeat bars), so a
      sequence of notes within a repeat loop is simply drawn multiple times.
         
         ***TOOLTIPS***
         [Staff Height]
           Change the height of the staffs in the score viewer, in pixels. Use
           larger values to view notes beyond the visible bounds.
         [Time Signature: beats per measure]
           In the traditional manner of time signatures, this is the number of
           beats per measure.
         [Time Signature: note value]
           The note value is the beat length of each note. A time signature of 3/8
           means a measure's length is equivalent to three 8th notes. 13/4 is
           thirteen quarter notes per measure. The measure lines in the score view
           are drawn based on these values.
         [Note Spacing %]
           The spacing between each note by %. Each type of beat has a number of
           default ticks. A whole note is 192 ticks, so the score viewer sets the
           distance from a whole to 192 pixels. A quarter note is 48 ticks, thus
           quarter notes are 48 pixels apart. Changing the note spacing to 50% for
           example would draw a distance of 96 pixels between whole notes and 24
           pixels between quarters.
         [Show Rests]
           Show or hide the rests, if they are cluttering up the staff and
           obstructing the view.
      
      ____________
      Score Writer
      ¯¯¯¯¯¯¯¯¯¯¯¯
      Write your own basic scores using the notes and rests provided in the
      toolstrip. This is completely separate from the ROM, and does not
      interact with the ROM in any way other than to export the custom made
      score to separate .txt files for each channel and import those into an
      SPC's channel track.
      Notes/rests can be drawn, erased, and the orientation can be changed in
      the same nature as the score viewer (staff height, time signature,
      etc). This is a fairly basic feature, which can only insert the beats
      used by SMRPG and no notes with a fixed durations/tick length. Most
      useful is its ability to undo/redo any action and save/export in three
      formats.
____________
BATTLEFIELDS
¯¯¯¯¯¯¯¯¯¯¯¯
A battlefield is simply a background image used in a battle. More
technically, it is a tileset and NOT a tilemap: it contains only one
layer and is arranged on an 8x8 tile basis. Battlefields can have
between 1 and 4 quadrants, most of which only have 1.
   
   ***TOOLTIPS***
   [Battlefield Index]
     Select the battlefield to load.
   [GFX Set 1]
     The 1st graphic set in the current battlefield.
   [GFX Set 2]
     The 2nd graphic set in the current battlefield.
   [GFX Set 3]
     The 3rd graphic set in the current battlefield.
   [GFX Set 4]
     The 4th graphic set in the current battlefield.
   [GFX Set 5]
     The 5th graphic set in the current battlefield.
   [Tileset]
     The tileset used by the current battlefield.
   [Palette Set]
     The palette set is a set of 7 palettes that comprise all of the colors
     that the battlefield image uses.
_________
DIALOGUES
¯¯¯¯¯¯¯¯¯
Dialogues are the game's script. Dialogues must be triggered by an
event script command to show. Generally, most dialogues are "assigned"
to an NPC, ie. the NPC has an event # assigned to it, wherein there is
a command to display a specific dialogue # in that event script. The
first few dialogues are by default used as the message / caption that
is shown at the top of some levels.
To find a dialogue, use the text field "Find...". Dialogues have a
number of commands and characters which can be inserted either using
the toolstrip on the right or through font table's right-click menu
item "Insert into dialogue".
The dialogues editor contains two subwindows: battle dialogues and
fonts.
   
   ***TOOLTIPS***
   [Dialogue Index]
     Select the dialogue to edit by number.
   [Text View]
     Enable or disable text viewing in the dialogue textbox. This is for
     easily identifying what the numerals in [] mean.
   [Dialogue]
     Edit the current dialogue.
     To insert symbols, simply right-click the symbol in the dialogue font
     table and click "Insert into dialogue".
   [Compression Table]
     A compression table is a set of texts which are assigned a single byte
     when saved to ROM to conserve dialogue space. These are typically the
     most common words or parts of words present in all dialogues, hence
     saving the most space possible. Beware that changing these may either
     increase or decrease the number of free bytes. Unless translating to
     another language, it's best not to change any of these except for the
     last two labelled "Booster".
   
   ________________
   BATTLE DIALOGUES
   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
   Battle dialogues are single-line texts displayed only in battle, and
   must be triggered by a battle script or animation script command to be
   shown. They use the same "dialogue" font table as the main overworld
   dialogues, but have a limited number of non-symbol related commands,
   however, compared to the overworld dialogues. These commands can be
   inserted with toolstrip on the right, while special symbols are
   insertable using the font table's right-click menu.
      
      ***TOOLTIPS***
      [Battle Dialogue Index]
        Select the battle dialogue to edit by number.
      [Battle Dialogue]
        Edit the current battle dialogue. To insert symbols, simply right-click
        the symbol in the font table and click "Insert into battle dialogue".
        Symbols can be manually defined in the text using [] brackets, wherein
        the symbol's index in the font table is placed.
   
   _____
   FONTS
   ¯¯¯¯¯
   4 font tables can be selected:
   "Menu" font is used in the overworld menu.
   "Dialogue" font is used in overworld and battle dialogue.
   "Description" font is used in item and spell descriptions in the
   overworld menu.
   "Triangles" are the option triangles used in overworld dialogue.
   It must be noted that each font table has its OWN keystroke table. If
   you are translating the game's text, remember that if writing special
   characters like á, é, etc. into an element's name, description, etc.
   you must assign a keystroke value to the font letter you want to
   associate it with--for ALL three font tables.
   Only the "dialogue" font allows the user to insert symbols into the
   overworld or battle dialogue through the right-click menu.
      
      ***TOOLTIPS***
      [Font Table]
        Select the font table to load.
      [Width]
        The width of the character, in pixels, as drawn in-game. Pixels beyond
        the boundaries of the width will NOT display in the dialogue.
      [Font Table]
        Click a character to edit it in the paint box on the right.
      [Width]
        The width, in pixels, of the font letter.
      [Key]
        The key assigned to the font letter. If drawing letters with accents,
        diacritic marks, etc. change its key to that letter before beginning a
        translation.
_______
EFFECTS
¯¯¯¯¯¯¯
The spell effect editor has two subwindows: molds and sequences.
A spell effect is not the entire spell animation itself, but an
animation sequence used in spell animations. Spell animation scripts
can use more than one different spell effect, for example, the
"Boulder" spell uses spell effect 26 (boulder) and 53 (black flash).
   
   ***TOOLTIPS***
   [Effect Index]
     Select the spell effect to load.
   [Image]
     The image # of the currently selected spell effect refers to the set of
     properties that designate the raw graphics and palette set to use.
     Anything in the "Image Properties" box is part of the spell effect's
     image.
   [Palette]
     The index of the palette in the palette set the spell effect uses. This
     is mostly used for individual spell effects that use the same image
     (thus, the same palette set) but have a different individual palette,
     such as the star rain and black star rain.
   [X]
     The X shift is the number of pixels to shift the spell effect animation
     to the left.
   [Y]
     The Y shift is the number of pixels to shift the spell effect animation
     up.
   [Palette Size]
     The size of the palette in bytes. The total number of palettes in the
     spell effect image's palette set equals the size divided by 32.
   [Graphic Size]
     The size of the raw graphics in bytes (hexadecimal). Every 0x20 bytes
     is one or two 8x8 tiles.
   [BPP Codec]
     The codec refers to how the graphics are read by the game engine. 4bpp
     uses up to 16 colors total, while 2bpp only uses 4 colors total.
   
   _____
   MOLDS
   ¯¯¯¯¯
   Effect molds are basically a collection of tilemaps, each drawn from
   the same tileset (on the right) much in the same nature as levels,
   although just one layer.
      
      ***TOOLTIPS***
      [Width]
        The width of the spell effect's animation molds, in 16x16 tiles.
      [Height]
        The height of the spell effect's animation molds, in 16x16 tiles.
      [Size]
        The size of the tileset in hexadecimal bytes. The total number of tiles
        in the spell effect image's tileset equals the size (in hexadecimal)
        divided by 8.
      [Mold Collection]
        The collection of molds used by the spell effect's animation.
   
   _________
   SEQUENCES
   ¯¯¯¯¯¯¯¯¯
   Each effect can have only one sequence, unlike sprites, and is a
   collection of frames. Each frame is assigned a mold from the mold
   collection above and a duration, creating an animation that can be
   played back in the image to the right.
      
      ***TOOLTIPS***
      [Frame Collection]
        The collection of frames used by the spell effect animation.
      [Mold]
        The mold used by the currently selected frame. This value is based on
        the collection of molds in the molds editor above.
      [Duration]
        The duration of the currently selected frame, or how long the frame
        will pause before the next frame starts. This value refers to the # of
        frames based on a 60-frames-per- second unit.
_____________
EVENT SCRIPTS
¯¯¯¯¯¯¯¯¯¯¯¯¯
The game basically progresses by event scripts, outside of battle.
Everything you see happening in a level that isn't controlled by the
player (ie. Mario) is executed by the commands in an event script.
Scripts are usually initialized by a trigger in the level, when Mario
comes into contact with either an event field or an NPC. An event
script is also automatically initialized every time when entering a new
level.
An event script is comprised of 0 or more commands, of which fall into
two categories: event or action queue commands. Event commands
generally alter or read things like memory, tell the script to jump to
an address in the event data, etc. All of the options appear in each
event command category in the category list on the top-right. Action
queue commands only appear in an action queue for a specific NPC or
object, such as Mario or the screen. These commands are usually
coord-shifting and sequence playback commands for NPCs and other
objects.
   
   ***TOOLTIPS***
   [Script Type]
     Select the type of script to load.
   [Script Index]
     Select the event or action script to edit by number.
   [Goto Address]
     Jump to the command at or closest to the given address.
   [Script Commands]
     The list of commands (aka "command tree") in the current script. Check
     the commands to delete, cut, or copy (using the toolstrip below), or
     double-click the commands to edit them in the box on the lower-right.
   [Insert Command]
     Insert a new command after the selected command in the command list to
     the left.
   [Apply Changes]
     Apply all changes made to the edited command.
   [Action]
     Check this if you want to insert an action queue command into the
     currently selected command. Leave unchecked to insert an event command
     after the currently selected command.
   [Select category]
     Select a category of event scripts, then choose from the commands in
     that category to create a new one. Some categories may need further
     explanation for the novice user.
     "Objects" ie. action queues, will provide a list of objects to choose
     from for creating an action queue. These are mostly NPC #'s
     corresponding to the numbers in the NPC collection seen in the levels
     editor, but include other commonly used objects such as Mario or the
     screen layers.
     "Jump to" commands will jump to an address within the current bank. So
     if the event script command offsets start with $1E, a jump to command
     with an address of $78FE will jump to $1E78FE. You cannot jump to an
     address outside of the bank, but you can jump to any one of the 4096
     events using the commands in the "Events" category.
     "Memory" and "Memory $7000" commands change and read values/bits stored
     in memory addresses. "Memory" commands generally read or modify bits in
     memory addresses $7045 and over. "Memory $7000" commands generally have
     fewer limits in that they are commonly used to check anything not
     associated with event bits, and are read/written on a byte basis
     instead of the bit basis $7045+ addresses are used for.
     "Return" simply ends the script or the entire hierarchy of scripts.
   [Action Queue Categories]
     Select a category of action queue commands, then choose from the
     commands in that category to create a new one. Some categories may need
     further explanation for the novice user.
     "Properties" commands can modify the object's sprite attributes
     (several are associated with the NPC attributes box in the levels
     editor).
     "Sprite sequence" commands can play back a sprite sequence or set to a
     single mold corresponding to the molds and sequences in the sprites
     editor.
     "Shift" commands move the object on either a pixel or isometric basis,
     either by a given unit or by single unit.
     "Jump to" commands will jump to an address within the current bank. So
     if the event script command offsets start with $1E, a jump to command
     with an address of $78FE will jump to $1E78FE. You cannot jump to an
     address outside of the bank, and jump to command inside an action queue
     should not jump outside of the queue.
     "Memory" and "Memory $700C" commands change and read values/bits stored
     in memory addresses. "Memory" commands generally read or modify bits in
     memory addresses $7045 and over. "Memory $700C" commands generally have
     fewer limits in that they are commonly used to check anything not
     associated with event bits, and are read/written on a byte basis
     instead of a bit basis like $7045+ addresses.
     "Return" simply ends the action queue or the entire script.
   [Commands]
     Select a command from the list of commands contained in the currently
     selected category above.
   [Bytes Left]
     The remaining bytes available in the current bank. If the number here
     is negative, none of the scripts in the bank will save. The three banks
     ($1E,$1F,$20) have different amounts of free space.
   [Hex]
     The raw hex data of the currently select event command in the command
     tree.
   
   ______________
   Action Scripts
   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯
   Action scripts are the behaviors of NPCs and other objects in a level.
   The random movements of townspeople are infinitely looping action
   scripts. The behaviors of monsters in a level are all action scripts.
   Action scripts are basically the same as action queues found in event
   scripts, except they can only contain action commands and aren't
   "triggered" like event scripts are. They're set and usually assigned to
   NPCs in the levels editor, but an NPC's action script can be changed
   within an event script.
__________
FORMATIONS
¯¯¯¯¯¯¯¯¯¯
This editor has 2 subwindows: NewFormations and packs.
   
   __________
   FORMATIONS
   ¯¯¯¯¯¯¯¯¯¯
   A formation is a set of monsters encountered in battle. A formation is
   chosen when a battle is called through either an event script or
   through the property of an NPC in a level.
      
      ***TOOLTIPS***
      [Formation Index]
        Select the formation to load.
      [Event]
        The battle event sequence that plays at the start of the battle. These
        can be edited in the animations editor.
      [??????]
        Unknown formation property; it is recommended to leave it alone. Only
        the Bowser, Kinlink formation has this value set by default.
      [Type]
        The music assigned to the formation that plays in battle.
        The music can be selected from 8 indexes or set to {CURRENT}, which
        continues to play the current music track in the overworld when the
        battle begins. To edit the actual track that is assigned to the index,
        change the "Track" property below.
      [Track]
        The music track assigned to the currently selected "Type" to the left.
        Note that changing this value will affect the music for all formations
        that use the same "Type" as the currently selected formation.
      [Can't Run]
        If checked, it is impossible to run away from the formation in battle.
      [Monster Number]
        A monster in the formation, by number.
      [Monster Name]
        A monster in the formation, by name.
      [X]
        The X coord, in pixels, of a monster in the formation.
      [Y]
        The Y coord, in pixels, of a monster in the formation.
      [Use]
        The monsters enabled in the formation. This must be checked for a
        monster that is to have any presence in the battle at all.
        It is not recommended to have more than 6 monsters enabled in one
        formation, due to VRAM capacity.
      [Hide]
        The monsters not present in the formation at the start of the battle.
        Monsters with this property checked can be later called to battle
        through the battle-script.
      [Formation Image]
        Click and drag the monsters in the formation.
        The actual boundaries of the image are beyond the visible boundaries as
        seen here and in-game, thus a monster coordinate of 0,0 or 255,255 may
        hide it completely.
      [BG]
        Select the battlefield background to preview the formation in. This is
        only for preview purposes; changing this will have no effect on the
        ROM.
   
   _____
   PACKS
   ¯¯¯¯¯
   A pack is a set of three formations to either randomly or selectively
   choose from when a battle is called, through an event script or through
   an the property of an NPC in a level.
      
      ***TOOLTIPS***
      [Pack Index]
        Set the formation pack to edit by number.
      [Formation 1]
        The 1st formation in the pack.
      [Formation 2]
        The 2nd formation in the pack.
      [Formation 3]
        The 3rd formation in the pack.
      [Load]
        Load the 1st formation into the formation editor.
      [Load]
        Load the 2nd formation into the formation editor.
      [Load]
        Load the 3rd formation into the formation editor.
      [Pack 1 Formation Collection]
        The list of monsters in the 1st formation.
      [Pack 2 Formation Collection]
        The list of monsters in the 2nd formation.
      [Pack 3 Formation Collection]
        The list of monsters in the 3rd formation.
_____
ITEMS
¯¯¯¯¯
This editor has 2 subwindows: items and shops.
   
   _____
   ITEMS
   ¯¯¯¯¯
   Items include both items usable in battle and the overworld menu, as
   well as all forms of equipment and special items. Their properties are
   applied to either in-battle usage, overworld usage or both.
      
      ***TOOLTIPS***
      [Item Index]
        Select the item to load.
      [Item Name]
        The item's displayed name in all menus.
      [Icon]
        The item's icon as seen preceding its displayed name in all menus.
      [Coin Value]
        The amount the item costs in a shop. Final costs varies depending on
        the "Purchase Discounts" properties of the shop selling the item. The
        resale value of the item is exactly half the "Coin Value" (ie. how many
        coins you receive from selling it in a shop).
        NOTE: to make item a "Special Item", set coin value to 0.
      [Speed]
        The wearer's total speed is increased by this amount. This property is
        ignored for non-equipment items.
      [Attack Range]
        The attack range is the range of damage, plus and minus the "Attack"
        value, done to the target. The final damage will be a random value
        chosen from the "Attack" value plus and minus the "Attack Range" value.
        Example: if the "Attack" is 50, and the attack range is 25, the final
        damage could be anywhere from 25 to 75. This property is ignored for
        non-weapon items.
      [Infliction Amount]
        The exact damage, heal or increment amount inflicted by an item. This
        property will heal, damage or increment a property depending on the
        value of "Inflict Function". Example: Flower Box has an "Infliction
        Amount" of 5 and an "Inflict Function" of Raise Max FP, which means it
        increments the Max FP by 5. Ice Bomb has an "Infliction" "Amount" of
        140, which means it does 140 base damage.
      [Attack]
        The wearer's total Attack Power is increased by this amount. This
        property is ignored for non-equipment items.
      [Defense]
        The wearer's total Defense Power is increased by this amount. This
        property is ignored for non-equipment items.
      [Magic Attack]
        The wearer's total Magic Attack Power is increased by this amount. This
        property is ignored for non-equipment items.
      [Magic Defense]
        The wearer's total Magic Defense Power is increased by this amount.
        This property is ignored for non-equipment items.
      [Item Type]
        The type of item will determine whether the item can be equipped, what
        menu inventory it appears in, etc.
      [Effect Type]
        The effect type, ie. whether or not the item will inflict, nullify or
        protect against (an) effect(s).
        "Protection" should only be used for equipment, such as the Super Suit
        which protects against all adverse effects.
        "Infliction" will inflict anything under "EFFECT" on the target, or
        raise any stats under "STATS". Set only for items that are used in
        battle.
        "Nullification" will remove the effects under "EFFECT" on the target,
        or lower the stats under "STATS". Set only for items that are used in
        battle.
        If set to {NONE} then anything checked under "EFFECT" and "STATUS" is
        ignored. Likewise, this property is ignored if nothing under "EFFECT"
        and "STATUS" is checked.
      [Inflict Function]
        The inflict function is only used for non-equipment items, such as the
        Mushroom which is set to "Restore HP" and Maple Syrup which is set to
        "Restore FP", or the Flower items that raise the maximum FP are set to
        "Raise Max FP".
        Some functions read the "Infliction Amount" value to determine how much
        HP, FP, etc. will be restored/raised.
      [Inflict Element]
        The inflict element is only used with items that typically cause damage
        to the target. By default, only the Fire and Ice Bomb items have this
        set, although any item that can cause damage will read from this.
      [Item Properties]
        "Mortality Protection" is only used with equipment and causes all
        instant death attacks to always miss.
        "Hide Battle Numerals" is only used with items in battle, typically
        those that cause 0 or 9999 damage to avoid the redundant "0" or "9999"
        appearing.
        "Usable in Battle Menu" and "Usable in Overworld Menu" indicate whether
        the item can be used in and/or out of battle in the menu.
        "Reusable" gives the item infinite usage, eg. the "Star Egg" can be
        used repeatedly and never run out. NOTE: the Lucky Jewel can has this
        set, but the CPU reads a RAM address to limit the usage to 10 times.
        That cannot be changed here.
      [Description]
        The item description as it appears in the lower-left corner of the
        overworld menu when the cursor is on the item.
      [Effect <. . . .>]
        The effect inflicted, protected against or nullified on a target. 
        Example: Red Essence inflicts Invincible on the target. Super Suit
        protects against all effects (except Invincible). Able Juice nullifies
        all effects (except Invincible).
        These properties are used based on the value for "Effect Type".
      [Element Nullification]
        All attacks with the following checked elemental properties will always
        cause 0 damage to the wearer of the item. This property only applies to
        equipment.
      [Element Weaknesses]
        All attacks with the following checked elemental properties will double
        the damage to the wearer of the item. This property only applies to
        equipment.
      [Status <. . . .>]
        The status of a target is either lowered or raised by 50%, depending on
        the value for "Effect Type". If the value for "Effect Type" is set to
        "Infliction" then the target's stats will be raised 50%. If "Effect
        type" is set to "Nullification" then the target's stats will be lowered
        50%.
        Example: Power Blast by default raises the target's Attack and Magic
        Attack power by 50% (eg. if the attack and/or defense power of the
        target is 100, then it becomes 150). If the item is equipment, then the
        wearer's stats (in-battle) will be raised/lowered 50%. If the item is a
        usable item in- battle, then the target's stats will be raised/lowered
        50%.
      [Who Can Equip]
        Who can equip the item. Example: Lazy Shell can be equipped by all 5
        characters. This property is ignored by non-equipment items.
      [Targetting]
        "Other Targets" will limit the target to a single ally or enemy. This
        must NOT be checked with "Entire Party".
        "Enemy Party" will allow the spell to target the opposing party.
        "Entire Party" will cause the spell to target all members of either the
        ally party or enemy party. This must NOT be checked with "Other
        Targets".
        "Wounded Only" will limit the target to wounded members, ie. members
        with currently 0 HP.
        "One Party Only" will limit the target to only one party. By default,
        all usable spells have this property enabled. Uncheck at your own risk!
        "Not Self" will limit the target to other allies only, and the caster
        is untargettable. By default no spells have this checked, although the
        Mushroom item that turns the user into a mushroom has this property
        enabled.
        NOTE: these properties are ignored by items that cannot be used in
        battle.
      [Menu Cursor Lead To]
        The action of the cursor when the item is selected for use in the
        overworld menu only. Example: the Mushroom will direct the cursor to HP
        (ie. the HP will be restored) and the Maple Syrup will direct the
        cursor to FP (ie. the FP will be restored).
      [Menu Cursor Limitations]
        "Restore only if HP less than max" will restore the HP only if the
        target's current HP does not equal the maximum HP. "Restore only if FP
        less than max" likewise, does similarly for FP.
      
      _____________
      Weapon Timing
      ¯¯¯¯¯¯¯¯¯¯¯¯¯
         
         ***TOOLTIPS***
         [[1.5x]
           The frame # from the start of the weapon animation (ie. the time the
           character runs up to the target and starts wielding the weapon) where
           the level 1 timing begins. Example: the default value for Hammer is 8.
           This means that if an ABXY button is pressed after 8 frames have passed
           from the start of the Hammer animation (ie. when Mario starts to lift
           the hammer) the damage is increased by at least 50%.
         [(2x]
           The frame # from the start of the weapon animation (ie. the time the
           character runs up to the target and starts wielding the weapon) where
           the level 2 timing begins. Example: the default value for Hammer is 14.
           This means that if an ABXY button is pressed after 14 frames have
           passed from the start of the Hammer animation (ie. when Mario starts to
           lift the hammer) the damage is increased by at least 100% (ie.
           doubled).
         [2x)]
           The frame # from the start of the weapon animation (ie. the time the
           character runs up to the target and starts wielding the weapon) where
           the level 2 timing ends. Example: the default value for Hammer is 20.
           This means that if an ABXY button has NOT been pressed after 20 frames
           have passed from the start of the Hammer animation (ie. when Mario
           starts to lift the hammer) the opportunity to increase the damage by
           100% (ie. doubled) is gone.
         [1.5x]]
           The frame # from the start of the weapon animation (ie. the time the
           character runs up to the target and starts wielding the weapon) where
           the level 1 timing ends. Example: the default value for Hammer is 38.
           This means that if an ABXY button has NOT been pressed after 38 frames
           have passed from the start of the Hammer animation (ie. when Mario
           starts to lift the hammer) the opportunity to time the attack for any
           damage increase is gone.
   
   _____
   SHOPS
   ¯¯¯¯¯
   Each shop is a collection of items which appear when a shop menu is
   opened up, and a set of properties which affect the price and
   availability of the item in the collection.
      
      ***TOOLTIPS***
      [Shop Index]
        The shop to edit by label. These shop "names" are simply labels used to
        identify the shops. The user may change the label.
      [Shop Label]
        The currently selected shop's label. Use this to label / identify a
        shop. This is not read from anywhere in the ROM and is exclusively part
        of the editor. Changing this will have no effect on the game.
      [Shop Options]
        "Buy with Frog Coins, one product each" is used, for example, by the
        "Frog Disciple" in Seaside Town. Only one of each product can be bought
        with Frog Coins only.
        "Buy with Frog Coins" is the same as above, only the product(s) can be
        bought as many times as afforded. The "Frog Coin Emporium" uses this
        property.
        "Buy only, no selling" is obvious: only buying is allowed in the shop,
        and items cannot be sold. Both of these properties are exactly the
        same, there is no difference (they are merely two separate bits that
        each have the same property).
      [Purchase Discounts]
        These will lower the prices of the items being sold, according to their
        "Coin Value". For example, a Juice Bar has a discount of 50%, which
        means the KeroKeroCola it sells (which is normally 400 coins) is 50%
        less than 400 coins, ie. 200 coins. These can be combined, ie. if 50%
        and 25% are both checked, then the discount is 75%.
______
LEVELS
¯¯¯¯¯¯
The places and areas you can enter in-game. Many ROM editors also refer
to these as "locations" or "rooms".
A single level is often a smaller part of a larger map, and is defined
by a set of boundaries known as a "mask". Hence the appearance of
multiple levels in the level image when a single level is selected.
These are all explained in the individual tab descriptions below.
   
   ***TOOLTIPS***
   [Level Index]
     Select the level to edit by name. The name is based on a label assigned
     by either the default or user-defined label. Edit the level's
     name/label by clicking on the label button to the right.
   [Level Index]
     Select the level to edit by number.
   [Level Name]
     The level's name/label. This is a property exclusive to the editor:
     changing this will not affect the ROM.
   [BUTTON: Event #]
     Opens the event scripts editor and loads the event #.
   [Event #]
     The event # that initially runs when the level is first opened. If a
     custom level appears black or empty when opened, it's possible the
     event # does not contain a "fade in from black" command.
   [Music]
     The music, or SPC track, that plays when the level is opened. This can
     be overridden by an event command.
   
   ____
   Maps
   ¯¯¯¯
   The "MAPS" tab contains all the properties of a level's map. The map is
   the collection of properties that set the tilemaps, palette, and
   tilesets for the level. Each level is assigned a "Map #" with all of
   the properties in the "MAPS" tab.
   A graphic set is a loosely organized collection of 4bpp or 2bpp 8x8
   tiles that are read from and organized into 16x16 tiles by a tileset.
   They are essentially the raw graphics used by a level.
   A tileset is a set of 16x16 tiles (drawn using the graphic sets) which
   comprise what is essentially the set of tiles of which the final level
   image is drawn. Note that tilesets do not contain any raw graphics, and
   are merely each a series of indexes in which 8x8 tiles are chosen from
   the graphic sets in the map.
   A tilemap is a map of 16x16 tiles (drawn using the tilesets) which
   comprise what is essentially the final level image (for that layer
   only).
   Many levels use the same map as other levels, such as the Booster Tower
   levels, because the area which generally constitutes the viewable
   boundaries of the level in-game is merely a portion of the entire map,
   where the boundaries are often set by the Layer Mask edges. If the
   boundaries are not set, then often when Mario walks to the far edge of
   a level, another part of the level's map which constitutes a different
   level can be seen.
      
      ***TOOLTIPS***
      [Map #]
        Set the level's map #.
      [GFX Set 1]
        The 1st graphic set in the current map.
      [GFX Set 2]
        The 2nd graphic set in the current map.
      [GFX Set 3]
        The 3rd graphic set in the current map.
      [GFX Set 4]
        The 4th graphic set in the current map.
      [GFX Set 5]
        The 5th graphic set in the current map.
      [L3 GFX Set]
        The graphic set used by Layer 3 in the current map. This is in 2bpp
        format.
      [L1 Tileset]
        The tileset used by Layer 1 in the current map.
      [L2 Tileset]
        The tileset used by Layer 2 in the current map.
      [L3 Tileset]
        The tileset used by Layer 3 in the current map.
      [L3 Priority 1]
        If enabled, the 8x8 tiles in the tilemap's Layer 3 tiles that have the
        "L3 Priority 1" property enabled in the Layer 3 tileset will appear on
        top of all other tiles of all other layers.
      [L1 Tilemap]
        The tilemap used by Layer 1 in the current map. Layer 1 is most often
        the "top" layer which usually includes things such as crates, trees,
        bushes, pipes, etc..
      [L2 Tilemap]
        The tilemap used by Layer 2 in the current map. Layer 2 is most often
        the "ground" layer which usually includes the entire floors, grounds,
        walls, etc. of a level image.
      [L3 Tilemap]
        The tilemap used by Layer 3 in the current map. Layer 3 is most often
        the "effect" layer which usually includes water, fog effects,
        translucent images, clouds, etc..
      [Solidity Map]
        The solidity map, also referred to as a physical map or collision
        tiles, is a map of solid tiles in the orientation of an isometric map.
        An isometric map is a 2D map that projects a 3D-like image.
        The solidity map can be shown/hidden using the block-like button in the
        toolstrip above the level image.
      [Battlefield]
        The battlefield is the background image used by any battles that are
        encountered in the level. A level is assigned a battlefield "set" or a
        group of battlefields from which one is manually selected through an
        event script.
      [Palette Set]
        The palette set is a set of 7 palettes that comprise all of the colors
        that the level image uses.
   
   _____
   Layer
   ¯¯¯¯¯
   The "LAYER" tab contains all the properties of and effects applied to
   the level's layers.
      
      ***TOOLTIPS***
      [Message]
        The dialogue message that appears at the top of the screen when the
        level is entered. These can be individually edited in the dialogues
        editor. In order for a message to show, either the "SHOW MESSAGE" must
        be enabled for any exit field that leads to the current level or an
        event script command must be set for the current level's "Event #" in
        the toolstrip bar at the top of this editor.
      [Priority Set]
        A set of properties that handles how the layers of the level are drawn.
        Note that editing the properties in the "Layer Priority" box for the
        currently set Priority Set will affect all other levels that use the
        same Priority Set.
        "Mainscreen" refers to the layers that are drawn opaquely (ie. normally
        without 'see-through' effects).
        "Subscreen" refers to the layers that are drawn translucently (ie. 'see
        through' effects). Example: many levels with water (which is
        translucent) have the water on L3 (which is commonly used for water,
        clouds, fog, etc.) which is enabled in the subscreen.Generally, at
        least one (usually all) layer is enabled in the "Color Math" that is
        also enabled in "Mainscreen" in order for the "Subscreen" layers that
        are enabled to appear at all.
        "Color Math" refers to the layers that the subscreen will appear over.
        If nothing is enabled in "Color Math" then the subscreen will not show
        at all.This is called "Color Math" because the colors of the subscreen
        are being added to or subtracted from the colors on the mainscreen,
        which creates a translucent effect for the subscreen.
      [Intensity]
        "Half" intensity will halve the color values being added to or
        subtracted from. Example: if the mainscreen color has 128 for red and
        the subscreen color has 64 for red, then the final color will be
        (128/2) + (64/2) or 64 + 32 (or subtracts depending on the "Mode").This
        generally creates a darker effect of the subscreen.
        "Full intensity will add or subtract the full values of the colors.
        Example: if the mainscreen color has 128 for red and the subscreen
        color has 64 for red, then it adds 128 + 64 (or subtracts depending on
        the "Mode").This creates a much brighter effect than "Half" intensity.
      [Mode]
        "Plus" mode will add the colors of the subscreen together.
        "Minus" mode will subtract the subscreen colors from the mainscreen
        colors. This creates a much darker effect.
        In reference to the other "Layer Priority" properties, anything
        referring to an either/or case of subtracting or adding is referring to
        the "Mode" property.
      [L1 Mainscreen]
        Layer 1 of the mainscreen.
      [L2 Mainscreen]
        Layer 2 of the mainscreen.
      [L3 Mainscreen]
        Layer 3 of the mainscreen.
      [NPC Mainscreen]
        NPC layer of the mainscreen.
      [L1 Subscreen]
        Layer 1 of the subscreen.
      [L2 Subscreen]
        Layer 2 of the subscreen.
      [L3 Subscreen]
        Layer 3 of the subscreen.
      [NPC Subscreen]
        NPC layer of the subscreen.
      [L1 Color Math]
        Add / subtract subscreen from Layer 1 of the mainscreen.
      [L2 Color Math]
        Add / subtract subscreen from Layer 2 of the mainscreen.
      [L3 Color Math]
        Add / subtract subscreen from Layer 3 of the mainscreen.
      [NPC Color Math]
        Add / subtract subscreen from NPC layer of the mainscreen.
      [BG Color Math]
        Add / subtract subscreen from background layer of the mainscreen.
      [Lock Scrolling]
        If checked, the screen will be unable to scroll past the edge of the
        layer mask.
        The layer mask sets the viewable boundaries of the level. Anything
        beyond these boundaries will not appear in-game. Click the orange box
        in the toolstrip to show the layer mask.
      [Right]
        The right edge, in 16x16 tile units, of the layer mask.
      [Left]
        The left edge, in 16x16 tile units, of the layer mask.
      [Bottom]
        The bottom edge, in 16x16 tile units, of the layer mask.
      [Top]
        The top edge, in 16x16 tile units, of the layer mask.
      [L2 -X shift]
        Amount L2 is shifted left, in 16x16 tile units.
      [L2 -Y shift]
        Amount L2 is shifted up, in 16x16 tile units.
      [L3 -X shift]
        Amount L3 is shifted left, in 16x16 tile units.
      [L3 -Y shift]
        Amount L3 is shifted up, in 16x16 tile units.
      [Layer Scrolling Wrap]
        Scrolling layers will wrap around infinitely.
        For practical purposes, "horizontal" and "vertical" are generally
        checked together for a layer if either one is checked at all.
        NOTE: This is ignored if "Speed" in the "Layer Auto-scrolling" box for
        the layer is set to (none).
      [L2 Vertical Synchronization]
        The amount of layer 2's desynchronization when Mario walks up/down.
        This refers to the speed in which the screen scrolls up/down in the
        opposite direction when Mario walks up/down.
        This rarely used. Example: in Bowser's Castle in the throne room, where
        the Chandeliers (layer 2) have a "Low" horizontal and vertical desync
        value. This means the chandeliers will move left more slowly when Mario
        walks to the right, and move right slowly when Mario walks left. The
        same applies vertically.
      [L2 Horizontal Synchronization]
        The amount of layer 2's desynchronization when Mario walks left/right.
        This refers to the speed in which the screen scrolls left/right in the
        opposite direction when Mario walks left/right.
        This rarely used. Example: in Bowser's Castle in the throne room, where
        the Chandeliers (layer 2) have a "Low" horizontal and vertical desync
        value. This means the chandeliers will move left more slowly when Mario
        walks to the right, and move right slowly when Mario walks left. The
        same applies vertically.
      [L3 Vertical Synchronization]
        The amount of layer 3's desynchronization when Mario walks up/down.
        This refers to the speed in which the screen scrolls up/down in the
        opposite direction when Mario walks up/down.
      [L3 Horizontal Synchronization]
        The amount of layer 3's desynchronization when Mario walks left/right.
        This refers to the speed in which the screen scrolls left/right in the
        opposite direction when Mario walks left/right.
      [Infinite]
        For layers that have autoscrolling enabled (ie. the "Speed" for the
        layer is not set to (none)) the layer will scroll indefinitely.
        This property is ignored for layers that don't have "SCROLL WRAPPING"
        enabled.
      [L2 Shift]
        This will initially shift layer 2 some pixels before starting the
        autoscroll. No point is seen to this property, so it is recommended to
        leave it alone.
      [L3 Shift]
        This will initially shift layer 3 some pixels before starting the
        autoscroll. No point is seen to this property, so it is recommended to
        leave it alone.
      [L2 Direction]
        The direction layer 2 will scroll. This property is ignored if "L2
        Speed" is set to (none).
      [L2 Speed]
        The relative speed at which layer 2 will scroll.
      [L3 Direction]
        The direction layer 3 will scroll. This property is ignored if "L3
        Speed" is set to (none).
      [L3 Speed]
        The relative speed at which layer 2 will scroll.
      [Rippling Water]
        This, if enabled will create a "rippling water" effect on the subscreen
        layers.
      [L3 Animation Effects]
        The various animation effects that can be applied to layer 3.
      [Sprites Animation Effects]
        The various animation effects that are applied to sprites and other
        layers.
   
   ____
   NPCs
   ¯¯¯¯
   An "NPC" is a "non- playable character", or generally referred to as
   sprites although the use of the word "sprites" for this may be
   misleading since most NPCs do not correspond to the sprite index. Add,
   remove, duplicate, cut, copy, paste NPCs or NPC clones using the
   toolstrip above the NPC collection.
   You will notice in the NPC collection treeview some NPCs have child
   nodes, which here are referred to as "Clones" of an NPC. An NPC clone
   is an NPC that shares all of the same properties of its parent NPC (ie.
   the NPC it is an instance of) save for those fields not disabled when a
   clone is selected. Each clone has its own coords.
   Only up to 3 NPCs may contain clones. Clones *must* come first in the
   collection and *must* use gridplane format sprites for the partition to
   store them to the video memory's clone buffer properly.
      
      ***TOOLTIPS***
      [NPC Collection]
        The collection of NPCs in the level.
      [Partition]
        Set the level's partition packet.
      [Partition Browser]
        Find a partition with specific properties.
      [Type]
        Some properties of the NPC change based on it's type.
        "Object" is generally used for normal NPC's such as the characters in a
        town that trigger dialogue.
        "Treasure" is typically used for treasure chests.
        "Battle" is typically used for monsters that trigger a battle.
      [Trigger]
        This refers to how the event (assigned by the "Event #") will be
        triggered.
      [NPC #]
        The NPC assigned to the currently selected NPC.
      [NPC Browser]
        Since NPCs don't correspond to the actual Sprite # as seen in the
        Sprites editor, this browser/editor is required to find NPC's that use
        a specific sprite #.
      [BUTTON: Event # / Pack #]
        If "Type" is set to "Object" or "Treasure", this will open the event
        scripts editor and load the event #. If set to "Battle" it will open
        the formations editor and load the pack #.
      [BUTTON: Action #]
        Opens the event scripts editor and loads the action #.
      [Event / Pack #]
        If "Type" is set to "Object" or "Treasure", this will execute an event
        script when the NPC has been triggered.
        If "Type" is set to "Battle", this assigns a pack to the NPC to be
        accessed when the NPC has been triggered.
        Edit the event or pack by clicking the button to the left.
      [Action #]
        The action # that is initially assigned to the NPC when the level is
        first entered. The action is the general movement and behavior of the
        sprite, e.g. walking back / forth randomly.
        Click the button to the left to edit the action #.
      [Speed +]
        This will usually increase the speed of the NPC's playback.
      [Show NPC]
        This must be enabled for the NPC to initially appear in the level.
      [NPC #+ / $70A7 = / Action #+]
        If "Type" is set to "Object", this value is added to the NPC #. The
        purpose of this is to allow clones to use a different NPC # than their
        parent, but only within an index range of 7. Example: if "NPC #+" is 3
        and "NPC #" is 15, then the clone will be assigned NPC # 18. 
        If "Type" is set to "Treasure", this value is stored to memory address
        $70A7. $70A7 can be accessed in event scripts to determine what the
        item # or what type of item (ie. mushroom, super star, flower, etc.)
        will be given or shown for the treasure chest.
        If "Type" is set to "Battle", this value is added to the "Action #".
        The purpose of this is to allow clones to use a different action # than
        their parent, but only within an index range of 15. Example: if "Action
        #+" is 3 and the "Action #" is 15, then the clone will be assigned
        Action # 18.
      [Event / Pack #+]
        If "Type" is set to "Object", this value is added to the Event #. The
        purpose of this is to allow clones to use a different Event # than
        their parent, but only within an index range of 7. Example: if "Event
        #+" is 3 and the "Event #" is 15, then the clone will be assigned Event
        # 18. 
        If "Type" is set to "Treasure", this value refers to "Treasure" or the
        type of treasure the NPC will give you if it is triggered. Here is the
        default list of treasure types: 
        0 = mushroom 
        1 = invincible star 
        2 = flower 
        3 = frog coin. 
        Other values might refer to an item # that the treasure rewards, but
        this is usually declared by an event script.
        If "Type" is set to "Battle", this value is added to the "Pack #". The
        purpose of this is to allow clones to use a different action # than
        their parent, but only within an index range of 15. Example: if "Pack
        #+" is 3 and the "Pack #" is 15, then the clone will be assigned Pack #
        18.
      [Action #+]
        If "Type" is set to "Object", this value is added to the "Action #".
        The purpose of this is to allow clones to use a different action # than
        their parent, but only within an index range of 3. Example: if "Action
        #+" is 3 and the "Action #" is 15, then the clone will be assigned
        Action # 18.
      [After Battle]
        The behavior of the NPC after battle, either having won or ran away.
      [X]
        The isometric X coord of the NPC. For manual editing, use the
        "Isometric Coords" label below the level image.
      [Y]
        The isometric Y coord of the NPC. For manual editing, use the
        "Isometric Coords" label below the level image.
      [Z]
        The isometric Z coord, or the elevation, of the NPC.
      [+1/2]
        If enabled, the Z coord is increased by half a unit.
      [F]
        The F coord, ie. the direction the NPC faces.
      [Other Properties]
        "Face on trigger" will cause the NPC to face Mario when it has been
        triggered.
        "Sequence playback" must be enabled for any sprite sequences (ie.
        animations) of the NPC to play.
        "Can't float" will cause the NPC to fall to the ground if its Z coord
        is higher than the top of the floor.
        "Can't walk under" will not let Mario or any NPC's to walk under the
        NPC.
        "Can't pass walls" will not let the NPC pass through walls.
        "Can't jump through" will not let Mario or any NPC's beneath it to jump
        through the NPC.
        "Can't pass NPCs" will not let the NPC pass through NPCs
        "Can't walk through" will not let Mario or any NPC's to walk through
        the NPC.
        "Slidable along walls" prevents the NPC from "sticking" to a wall if
        moving alongside it.
      
      ____
      NPCS
      ¯¯¯¯
      An "NPC" is a "non- playable character", or generally referred to as
      sprites although the use of the word "sprites" for this may be
      misleading since most NPCs do not correspond to the sprite index. Add,
      remove, duplicate, cut, copy, paste NPCs or NPC clones using the
      toolstrip above the NPC collection.
      You will notice in the NPC collection treeview some NPCs have child
      nodes, which here are referred to as "Clones" of an NPC. An NPC clone
      is an NPC that shares all of the same properties of its parent NPC (ie.
      the NPC it is an instance of) save for those fields not disabled when a
      clone is selected. Each clone has its own coords.
      Only up to 3 NPCs may contain clones. Clones *must* come first in the
      collection and *must* use gridplane format sprites for the partition to
      store them to the video memory's clone buffer properly.
         
         ***TOOLTIPS***
         [NPC Collection]
           The collection of NPCs in the level.
         [Partition]
           Set the level's partition packet.
         [Partition Browser]
           Find a partition with specific properties.
         [Type]
           Some properties of the NPC change based on it's type.
           "Object" is generally used for normal NPC's such as the characters in a
           town that trigger dialogue.
           "Treasure" is typically used for treasure chests.
           "Battle" is typically used for monsters that trigger a battle.
         [Trigger]
           This refers to how the event (assigned by the "Event #") will be
           triggered.
         [NPC #]
           The NPC assigned to the currently selected NPC.
         [NPC Browser]
           Since NPCs don't correspond to the actual Sprite # as seen in the
           Sprites editor, this browser/editor is required to find NPC's that use
           a specific sprite #.
         [BUTTON: Event # / Pack #]
           If "Type" is set to "Object" or "Treasure", this will open the event
           scripts editor and load the event #. If set to "Battle" it will open
           the formations editor and load the pack #.
         [BUTTON: Action #]
           Opens the event scripts editor and loads the action #.
         [Event / Pack #]
           If "Type" is set to "Object" or "Treasure", this will execute an event
           script when the NPC has been triggered.
           If "Type" is set to "Battle", this assigns a pack to the NPC to be
           accessed when the NPC has been triggered.
           Edit the event or pack by clicking the button to the left.
         [Action #]
           The action # that is initially assigned to the NPC when the level is
           first entered. The action is the general movement and behavior of the
           sprite, e.g. walking back / forth randomly.
           Click the button to the left to edit the action #.
         [Speed +]
           This will usually increase the speed of the NPC's playback.
         [Show NPC]
           This must be enabled for the NPC to initially appear in the level.
         [NPC #+ / $70A7 = / Action #+]
           If "Type" is set to "Object", this value is added to the NPC #. The
           purpose of this is to allow clones to use a different NPC # than their
           parent, but only within an index range of 7. Example: if "NPC #+" is 3
           and "NPC #" is 15, then the clone will be assigned NPC # 18. 
           If "Type" is set to "Treasure", this value is stored to memory address
           $70A7. $70A7 can be accessed in event scripts to determine what the
           item # or what type of item (ie. mushroom, super star, flower, etc.)
           will be given or shown for the treasure chest.
           If "Type" is set to "Battle", this value is added to the "Action #".
           The purpose of this is to allow clones to use a different action # than
           their parent, but only within an index range of 15. Example: if "Action
           #+" is 3 and the "Action #" is 15, then the clone will be assigned
           Action # 18.
         [Event / Pack #+]
           If "Type" is set to "Object", this value is added to the Event #. The
           purpose of this is to allow clones to use a different Event # than
           their parent, but only within an index range of 7. Example: if "Event
           #+" is 3 and the "Event #" is 15, then the clone will be assigned Event
           # 18. 
           If "Type" is set to "Treasure", this value refers to "Treasure" or the
           type of treasure the NPC will give you if it is triggered. Here is the
           default list of treasure types: 
           0 = mushroom 
           1 = invincible star 
           2 = flower 
           3 = frog coin. 
           Other values might refer to an item # that the treasure rewards, but
           this is usually declared by an event script.
           If "Type" is set to "Battle", this value is added to the "Pack #". The
           purpose of this is to allow clones to use a different action # than
           their parent, but only within an index range of 15. Example: if "Pack
           #+" is 3 and the "Pack #" is 15, then the clone will be assigned Pack #
           18.
         [Action #+]
           If "Type" is set to "Object", this value is added to the "Action #".
           The purpose of this is to allow clones to use a different action # than
           their parent, but only within an index range of 3. Example: if "Action
           #+" is 3 and the "Action #" is 15, then the clone will be assigned
           Action # 18.
         [After Battle]
           The behavior of the NPC after battle, either having won or ran away.
         [X]
           The isometric X coord of the NPC. For manual editing, use the
           "Isometric Coords" label below the level image.
         [Y]
           The isometric Y coord of the NPC. For manual editing, use the
           "Isometric Coords" label below the level image.
         [Z]
           The isometric Z coord, or the elevation, of the NPC.
         [+1/2]
           If enabled, the Z coord is increased by half a unit.
         [F]
           The F coord, ie. the direction the NPC faces.
         [Other Properties]
           "Face on trigger" will cause the NPC to face Mario when it has been
           triggered.
           "Sequence playback" must be enabled for any sprite sequences (ie.
           animations) of the NPC to play.
           "Can't float" will cause the NPC to fall to the ground if its Z coord
           is higher than the top of the floor.
           "Can't walk under" will not let Mario or any NPC's to walk under the
           NPC.
           "Can't pass walls" will not let the NPC pass through walls.
           "Can't jump through" will not let Mario or any NPC's beneath it to jump
           through the NPC.
           "Can't pass NPCs" will not let the NPC pass through NPCs
           "Can't walk through" will not let Mario or any NPC's to walk through
           the NPC.
           "Slidable along walls" prevents the NPC from "sticking" to a wall if
           moving alongside it.
      
      ____
      NPCS
      ¯¯¯¯
      An "NPC" is a "non- playable character", or generally referred to as
      sprites although the use of the word "sprites" for this may be
      misleading since most NPCs do not correspond to the sprite index. Add,
      remove, duplicate, cut, copy, paste NPCs or NPC clones using the
      toolstrip above the NPC collection.
      You will notice in the NPC collection treeview some NPCs have child
      nodes, which here are referred to as "Clones" of an NPC. An NPC clone
      is an NPC that shares all of the same properties of its parent NPC (ie.
      the NPC it is an instance of) save for those fields not disabled when a
      clone is selected. Each clone has its own coords.
      Only up to 3 NPCs may contain clones. Clones *must* come first in the
      collection and *must* use gridplane format sprites for the partition to
      store them to the video memory's clone buffer properly.
         
         ***TOOLTIPS***
         [NPC Collection]
           The collection of NPCs in the level.
         [Partition]
           Set the level's partition packet.
         [Partition Browser]
           Find a partition with specific properties.
         [Type]
           Some properties of the NPC change based on it's type.
           "Object" is generally used for normal NPC's such as the characters in a
           town that trigger dialogue.
           "Treasure" is typically used for treasure chests.
           "Battle" is typically used for monsters that trigger a battle.
         [Trigger]
           This refers to how the event (assigned by the "Event #") will be
           triggered.
         [NPC #]
           The NPC assigned to the currently selected NPC.
         [NPC Browser]
           Since NPCs don't correspond to the actual Sprite # as seen in the
           Sprites editor, this browser/editor is required to find NPC's that use
           a specific sprite #.
         [BUTTON: Event # / Pack #]
           If "Type" is set to "Object" or "Treasure", this will open the event
           scripts editor and load the event #. If set to "Battle" it will open
           the formations editor and load the pack #.
         [BUTTON: Action #]
           Opens the event scripts editor and loads the action #.
         [Event / Pack #]
           If "Type" is set to "Object" or "Treasure", this will execute an event
           script when the NPC has been triggered.
           If "Type" is set to "Battle", this assigns a pack to the NPC to be
           accessed when the NPC has been triggered.
           Edit the event or pack by clicking the button to the left.
         [Action #]
           The action # that is initially assigned to the NPC when the level is
           first entered. The action is the general movement and behavior of the
           sprite, e.g. walking back / forth randomly.
           Click the button to the left to edit the action #.
         [Speed +]
           This will usually increase the speed of the NPC's playback.
         [Show NPC]
           This must be enabled for the NPC to initially appear in the level.
         [NPC #+ / $70A7 = / Action #+]
           If "Type" is set to "Object", this value is added to the NPC #. The
           purpose of this is to allow clones to use a different NPC # than their
           parent, but only within an index range of 7. Example: if "NPC #+" is 3
           and "NPC #" is 15, then the clone will be assigned NPC # 18. 
           If "Type" is set to "Treasure", this value is stored to memory address
           $70A7. $70A7 can be accessed in event scripts to determine what the
           item # or what type of item (ie. mushroom, super star, flower, etc.)
           will be given or shown for the treasure chest.
           If "Type" is set to "Battle", this value is added to the "Action #".
           The purpose of this is to allow clones to use a different action # than
           their parent, but only within an index range of 15. Example: if "Action
           #+" is 3 and the "Action #" is 15, then the clone will be assigned
           Action # 18.
         [Event / Pack #+]
           If "Type" is set to "Object", this value is added to the Event #. The
           purpose of this is to allow clones to use a different Event # than
           their parent, but only within an index range of 7. Example: if "Event
           #+" is 3 and the "Event #" is 15, then the clone will be assigned Event
           # 18. 
           If "Type" is set to "Treasure", this value refers to "Treasure" or the
           type of treasure the NPC will give you if it is triggered. Here is the
           default list of treasure types: 
           0 = mushroom 
           1 = invincible star 
           2 = flower 
           3 = frog coin. 
           Other values might refer to an item # that the treasure rewards, but
           this is usually declared by an event script.
           If "Type" is set to "Battle", this value is added to the "Pack #". The
           purpose of this is to allow clones to use a different action # than
           their parent, but only within an index range of 15. Example: if "Pack
           #+" is 3 and the "Pack #" is 15, then the clone will be assigned Pack #
           18.
         [Action #+]
           If "Type" is set to "Object", this value is added to the "Action #".
           The purpose of this is to allow clones to use a different action # than
           their parent, but only within an index range of 3. Example: if "Action
           #+" is 3 and the "Action #" is 15, then the clone will be assigned
           Action # 18.
         [After Battle]
           The behavior of the NPC after battle, either having won or ran away.
         [X]
           The isometric X coord of the NPC. For manual editing, use the
           "Isometric Coords" label below the level image.
         [Y]
           The isometric Y coord of the NPC. For manual editing, use the
           "Isometric Coords" label below the level image.
         [Z]
           The isometric Z coord, or the elevation, of the NPC.
         [+1/2]
           If enabled, the Z coord is increased by half a unit.
         [F]
           The F coord, ie. the direction the NPC faces.
         [Other Properties]
           "Face on trigger" will cause the NPC to face Mario when it has been
           triggered.
           "Sequence playback" must be enabled for any sprite sequences (ie.
           animations) of the NPC to play.
           "Can't float" will cause the NPC to fall to the ground if its Z coord
           is higher than the top of the floor.
           "Can't walk under" will not let Mario or any NPC's to walk under the
           NPC.
           "Can't pass walls" will not let the NPC pass through walls.
           "Can't jump through" will not let Mario or any NPC's beneath it to jump
           through the NPC.
           "Can't pass NPCs" will not let the NPC pass through NPCs
           "Can't walk through" will not let Mario or any NPC's to walk through
           the NPC.
           "Slidable along walls" prevents the NPC from "sticking" to a wall if
           moving alongside it.
   
   _____
   Exits
   ¯¯¯¯¯
   An "Exit" is an isometric field that, when walked into, will open the
   level or world map location defined in the "Destination Properties"
   box.
   Add, remove, copy, paste, and duplicate exits using the toolstrip above
   the exit field collection.
      
      ***TOOLTIPS***
      [Exit Field Collection]
        The collection of exits, or entrances, in the level.
      [Destination Properties]
        The level or location (depending on the value "Type" is set to) that
        will open when the exit is triggered.
      [Show Message]
        This will display a 1-line dialogue at the top of the screen when the
        destination level is opened. Change the message for the destination
        level in the "LAYER" tab.
      [Type]
        Determines whether the destination is a level or location.
      [X]
        The isometric X coord of the Exit field. For manual editing, use the
        "Isometric Coords" label below the level image.
      [Y]
        The isometric Y coord of the Exit field. For manual editing, use the
        "Isometric Coords" label below the level image.
      [Z]
        The isometric Z coord, or the elevation, of the Exit field.
      [Length]
        The length, in isometric units, of the field.
      [Height]
        The height, in isometric units, of the field.
      [F]
        The F coord, ie. the direction or orientation the Exit.
      [NW/SE edge active]
        This will enable the trigger on the NW/SE edges of the field.
      [NE/SW edge active]
        This will enable the trigger on the NE/SW edges of the field.
      [X]
        Mario's initial isometric X coord in the destination level.
      [Y]
        Mario's initial isometric Y coord in the destination level.
      [Z]
        Mario's initial isometric Z coord, or elevation, in the destination
        level.
      [F]
        Mario's initial F coord (F direction) in the destination level.
      [+1/2]
        Increases Mario's initial isometric Z coord at the new destination by
        half.
   
   ______
   Events
   ¯¯¯¯¯¯
   An event field is an isometric field that, when walked into, will
   trigger an event #.
   Add, remove, copy, paste, and duplicate event fields using the
   toolstrip above the event field collection.
      
      ***TOOLTIPS***
      [Event Field Collection]
        The collection of event fields in the level.
      [BUTTON: Event #]
        Opens the event script editor and loads the event #.
      [Event #]
        This is the event # that will run when the event field has been
        triggered.
      [X]
        The isometric X coord of the event field. For manual editing, use the
        "Isometric Coords" label below the level image.
      [Y]
        The isometric Y coord of the Event field. For manual editing, use the
        "Isometric Coords" label below the level image.
      [Z]
        The isometric Z coord, or the elevation, of the Event field.
      [Length]
        The length, in isometric units, of the event field.
      [Height]
        The height, in isometric units, of the event field.
      [F]
        The F coord, ie. the direction or orientation the event field.
      [NW/SE edge active]
        This will enable the trigger on the NW/SE edges of the field.
      [NE/SW edge active]
        This will enable the trigger on the NE/SW edges of the field.
   
   ________
   Overlaps
   ¯¯¯¯¯¯¯¯
   An "overlap" is an object that hides NPCs under all layers.
   Add, remove, copy, paste, and duplicate overlaps using the toolstrip
   above the overlap collection.
      
      ***TOOLTIPS***
      [Overlap Collection]
        The collection of overlaps in the level.
      [Tile #]
        The tile # assigned to the overlap. Set the tile in the tileset below.
      [X]
        The isometric X coord of the Overlap. For manual editing, use the
        "Isometric Coords" label below the level image.
      [Y]
        The isometric Y coord of the Overlap. For manual editing, use the
        "Isometric Coords" label below the level image.
      [Z]
        The isometric Z coord, or the elevation, of the overlap.
      [+1/2]
        Increases the Z coord by half a unit.
      [Other Properties]
        The remaining properties of the overlap.
   
   _________
   Tile Mods
   ¯¯¯¯¯¯¯¯¯
   Tile mods are modifications to a level tilemap's tiles, usually done
   through an event script. Common examples include manually opening and
   closing doors through event commands, which require a tile mod to
   change the tiles to an open/closed door.
   A tile mod can also have an "alternate" tile mod, which can be selected
   in preference to the parent tile mod through an event script command's
   properties.
      
      ***TOOLTIPS***
      [Tile Mod Collection]
        The collection of tile mods for the level.
      [X]
        The X coord of the tile mod.
      [Y]
        The Y coord of the tile mod.
      [Length]
        The length, in isometric units, of the tile mod.
      [Height]
        The height, in isometric units, of the tile mod.
      [Layers]
        The layers included in the tile mod, to be edited in the level map. If
        no layers are selected, the tile mod will have no effect on the level.
   
   __________
   Solid Mods
   ¯¯¯¯¯¯¯¯¯¯
   A solid mod is similar to a tile mod in that the solidity map can be
   manually altered through an event script command. Its placement and
   dimensions, of course, are isometric.
      
      ***TOOLTIPS***
      [Solid Mod Collection]
        The collection of solid mods for the level.
      [X Coord]
        The isometric X coord of the solid mod.
      [Y Coord]
        The isometric Y coord of the solid mod.
      [Length]
        The length, in isometric units, of the solid mod.
      [Height]
        The height, in isometric units, of the solid mod.
   
   ______________
   Space Analyzer
   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯
   The Space Analyzer window is for monitoring the space available in the
   banks that store the compressed level map data for tile maps and
   solidity maps. The size of the uncompressed map data that the user
   interacts with in the editor is compressed to analyze the actual space
   which will be used in each bank.
   Each tab contains the entire list of tilemaps and solidity maps used by
   all levels, and the data for accessing each. Collections of rows are
   color-coded to separate the banks from one another. The most import
   column is probably the "Bytes left" column, which shows how many
   available bytes there are for that bank, starting at that map.
   If one or more rows (ie. maps) at the end of the bank are red, then
   there is not enough space to store all of the compressed maps and the
   editor will fail to save those map rows marked red.
      
      ***TOOLTIPS***
      [Tile Maps]
        This is the entire collection of tilemaps for all levels.
      [Solidity Maps]
        This is the entire collection of tilemaps for all levels.
   
   ___________
   SOLID TILES
   ¯¯¯¯¯¯¯¯¯¯¯
   Here a solidity tile is selected to draw to the level map.
   Solidity tiles, like the solidity map they're drawn in, are isometric
   in make-up. All of these properties are in isometric units.
   Solidity tiles are color-coded. Places where there are no tiles at all
   can be walked on. Grey tiles are tiles that can also (generally) be
   walked on. Slanted grey tiles are stairs that can be walked on. Pink
   tiles are those tiles or portions of tiles that cannot be walked on at
   all. White tiles are "floating" tiles, or tiles that hover above a base
   tile of the same tile. Dark grey tiles are simply base tiles which have
   a "floating" tile above them. Light blue tiles are water tiles that can
   be waded through. Dark blue tiles are water tiles that can be swum
   through. Green tiles are vine tiles that can be climbed.
   A solidity tile is arranged in four quadrants (north, south, east,
   west) each quadrant having its own set of properties. It also has four
   edges (NW, SW, NE, SE) which also have a set of attributes.
   The following is a list of the most common solidity tiles:
      
      Tile #0 is the empty tile--erasing a tile is the same as drawing tile
      #0 in its place. Therefore it is strongly recommended to leave this
      tile alone.
      Tile #255 is commonly used to set the physical boundaries of a level,
      just as the layer mask sets the visible boundaries.
      Tile #256 is exactly the same as tile #0, only that it has priority 3
      for objects that walk on it.
      
      ***TOOLTIPS***
      [Solid Tile Index]
        Select the solid tile to load.
      [Height of base tile]
        The height of the solidity tile from ground zero.
      [Height of overhead tile]
        An overhead tile is a solid tile that floats above the base tile. This
        is its height. If this is set to 0, there is no overhead tile.
      [Z coord of overhead tile]
        The elevation of the overhead tile. This value must be greater than or
        equal to the base tile's height.
      [Z coord of water tile]
        This is the surface of the water. If landed on, Mario will float on the
        surface. If walked under, Mario goes underwater. "Special tile format"
        must be set to "water", otherwise this will be ignored. This value must
        be higher than the height of the base tile. If this is set to 0, there
        is no water tile.
      [Z coord plus 1/2]
        Raises the Z coord, or elevation, of the overhead tile by half an
        isometric unit.
      [N]
        If "Solid quadrant flag" is enabled, the north quadrant of the tile is
        impassible.
      [W]
        If "Solid quadrant flag" is enabled, the west quadrant of the tile is
        impassible.
      [E]
        If "Solid quadrant flag" is enabled, the east quadrant of the tile is
        impassible.
      [S]
        If "Solid quadrant flag" is enabled, the south quadrant of the tile is
        impassible.
      [Solid tile]
        The entire tile becomes impassible, all other properties are
        overridden.
      [Solid quadrant flag]
        This must be set for any of the solid quadrants above to be effective.
      [NW]
        The north-western edge cannot be passed.
      [NE]
        The north-eastern edge cannot be passed.
      [SW]
        The south-western edge cannot be passed.
      [SE]
        The south-eastern edge cannot be passed.
      [P3 for object on edge]
        Mario or any NPCs on top of the tile's edges will overlap all other map
        layers.
      [P3 for object over edge]
        Mario or any NPCs above the tile's edges will overlap all map layers.
      [P3 for object on tile]
        Mario or any NPCs on the surface of the tile will overlap all map
        layers.
      [Conveyor belt runs]
        The direction the conveyor belt runs, if the tile behaves as a conveyor
        belt (see next two properties).
      [Conveyor belt, fast]
        Enable this to create a fast conveyor belt effect on the tile.
      [Conveyor belt, normal]
        Enable this to create a conveyor belt effect on the tile. If neither
        this nor the fast one is set, the tile will not act as a conveyor belt.
      [Stairs lead]
        The tile can act as a set of stairs, if not set to {none}.
      [Special tile format]
        The tile can act as a vine that can be climbed or a water tile, or
        neither.
      [Door format]
        Walking on this tile will do an automatic tile mod door effect on the
        map layers its placed at. Notice that the door tiles in the layer
        tileset must be in layer 1 and must be in the same position in the
        tileset image they are found in all levels with doors. Otherwise the
        solid tile's automatic tile mod function will set the tiles to whatever
        is at the default index of the door tiles.
        Some of these properties are unknown, but seem to call automatic tile
        mods.
      [Unknown Bits]
        These are all unknown bits.
__________
MAIN TITLE
¯¯¯¯¯¯¯¯¯¯
The main title screen is the first thing you see, after the Squaresoft
logo, when the game first initializes. It is a 3-layer image, composed
of 3 tilesets with a separate palette applied to each. The 1st layer is
the keep and cliffs, the 2nd is the blue background and clouds, and the
3rd is the title art for the Super Mario RPG logo. The 3rd layer is in
4bpp format and 256x56 pixels.
   
   ***TOOLTIPS***
   [Main Title Preview]
     The final product of all 3 layers as drawn in-game.
_____
MENUS
¯¯¯¯¯
Menus that can be edited here include the game select menu, all menus
in the overworld menu accessible with the X button, and all shop menus.
All exclusively menu-oriented text can be changed, as well as the music
and Mario sprites used by the new game select menu.
Overworld and shop menus use a different background palette, but the
same graphics and frame. Overworld and shop menus use a frame in the
foreground, while the new game menu has a more elaborate foreground. So
selecting a menu might change the data in the graphic & palette
editors.
Right-click the images below for more options, or simply use the
buttons in the toolstrip to import/export data.
   
   ***TOOLTIPS***
   [Menu Text Index]
     Select the menu text to load. Alternatively, and more practically, you
     can find the desired text by clicking on it in the menu preview below
     to the lower-right.
   [Menu Text]
     Change the menu text in this box. Beware, not all menu texts use the
     same keystroke table.
   
   _____
   MENUS
   ¯¯¯¯¯
      
      ***TOOLTIPS***
      [Menu]
        Select the menu to load.
      [Music]
        Change the new game select menu's music.
      [Sprite Cursor]
        Select the Mario sprite cursor to change its properties to the right.
      [Sprite]
        Set the sprite cursor's sprite to use.
      [Sequence]
        Change the sprite cursor's sequence corresponding to the sequences in
        the sprites editor.
__________
MINI-GAMES
¯¯¯¯¯¯¯¯¯¯
SMRPG's mini-games with a unique interface include the mine-cart levels
and the beetle mania game.
   
   _______________________
   MINE CART TRACK-BUILDER
   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
   Here the four mine-cart levels in Moleville Mountain can be fully
   modified from their maps to the mushroom and coin objects that appear
   in them.
   Two types of mine cart levels: mode 7 and side-scrolling. Mode 7 are
   the 1st and 3rd levels, while the side-scrolling levels are the 2nd and
   4th. Mode 7 levels are one layer only and can be edited like a level's
   tilemap. The mushroom count of both is fixed at 8 mushrooms,
   removal/insertion is not supported. Side-scrolling levels can have a
   custom number of mushrooms and coins.
      
      ***TOOLTIPS***
      [Mine Cart Index]
        Select the mine cart level to load.
      [Screen Collection]
        The side-scrolling mine cart level's screens, or the final product as
        seen in-game. These are not to be confused with the tilemap collection
        below. The screen collection is simply a list of screens arranged in a
        designated order from the tilemap collection below.
      [Start X]
        The initial starting X coord, in pixels, of Mario when the mine cart
        level opens.
      [Start Y]
        The initial starting Y coord, in pixels, of Mario when the mine cart
        level opens.
      [Music]
        Assign the music track used by all 4 mine cart levels.
      [Width]
        Set the width, in pixels, of the side-scrolling mine cart level. The
        level will exit in-game if Mario travels beyond the width boundary.
      [L1 Screen]
        The screen's layer 1 screen, selected from the tilemap collection in
        the tilemap editor at the very bottom.
      [L2 Screen]
        The screen's layer 2 screen, selected from the tilemap collection in
        the tilemap editor at the very bottom.
      [Object Collection]
        The collection of mushrooms and coins in the side-scrolling mine cart
        level. Each object is a row of 0 or more mushrooms or coins, the size
        of each row set by "Count".
      [Type]
        Mushrooms, coins, or none.
      [Count]
        The number of mushrooms or coins in the row. If set to 0, nothing will
        be shown.
      [X]
        X coord of the object row, in pixels.
      [Y]
        Y coord of the object row, in pixels.
________
MONSTERS
¯¯¯¯¯¯¯¯
This editor includes all exclusively in-battle properties of monsters,
including the battle scripts of each monster.
   
   ***TOOLTIPS***
   [Monster Index]
     Select the monster to load.
   [Monster Name]
     The monster's displayed name when targetted.
   [Effect Nullification]
     The effects that will have no effect if an effect-based attack is used
     on the monster, eg. Poison Gas (Poison), Terrorize (Fear), Bad Mushroom
     (Poison), etc.
   [Element Weaknesses]
     The elements that will double the damage done to the monster by an
     element-based attack. These refer to magic- based attacks or items,
     such as Snowy (Ice) or Fire Bomb (Fire), eg. Fire Bomb will normally do
     120 damage, but if used on a monster with a weakness for Fire it will
     double it to 240.
   [Element Nullification]
     The elements that will have no effect if an element-based attack is
     used on the monster, eg. Ice Bomb and Snowy will have no effect on a
     monster with a nullification of Ice.
   [Special Status]
     "Invincible" will nullify all damage done to the monster, ie. all
     attacks, spells and items used on the monster will yield 0 damage.
     "Mortality Protection" will nullify all instant-death attacks such as
     Yoshi Cookie, Lamb's Lure, Geno Whirl, etc.
     "Disable Auto-Death" is for battle-script purposes. If checked, the
     monster will not be removed or set as defeated until manually removed
     through a battle-script command.
     "Share palette" is only used by the four crystals and its actual
     purpose is unknown.
   [Flower Bonus]
     The Flower Bonus rewarded when the monster is defeated, based on the
     odds.
   [Success%]
     The success rate that the Flower Bonus will be rewarded when the
     monster is defeated.
   [Text View]
     Enable or disable text viewing in the psychopath message textbox. This
     is for easily identifying what the numerals in [] mean.
   [Psychopath Message]
     Edit the monster's psychopath message. This is oriented exactly the
     same as battle dialogues, selecting from the same keystroke table and
     same list of 5 commands in the toolstrip to the right.
   
   ____________
   Vital Status
   ¯¯¯¯¯¯¯¯¯¯¯¯
      
      ***TOOLTIPS***
      [HP]
        The monster's total hit points.
      [FP]
        The monster's total flower points.
      [Attack]
        The monster's attack power, ie. the base damage caused by the monster's
        non-magic-based attacks.
      [Defense]
        The monster's defense power, ie. the amount subtracted from the base
        damage of a non-magic-based attack on the monster.
      [Mg. Attack]
        The monster's magic attack power, ie. the base damage caused by the
        monster's magic-based attacks.
      [Mg. Defense]
        The monster's magic defense power, ie. the amount subtracted from the
        base damage of a non-magic-based attack on the monster.
      [Speed]
        The monster's speed, ie. the monster will have its turn before anyone
        else with a lower speed.
      [Evade%]
        The monster's evade percent, ie. the probability out of 100 a
        non-magic-based attack on the monster will miss. An evade% of 100
        causes all non-magic-based attacks on the monster to miss. An evade% of
        0 causes all non-magic- based attacks on the monster to hit. An evade%
        of 50 is a 50/50 equal chance that a non-magic-based attack on the
        monster will miss or hit.
      [Mg. Evade%]
        The monster's magic evade percent, ie. the probability out of 100 a
        magic-based attack on the monster will miss. An evade% of 100 causes
        all magic-based attacks on the monster to miss. An evade% of 0 causes
        all magic-based attacks on the monster to hit. An evade of 50 is a
        50/50 equal chance that a magic-based attack on the monster will miss
        or hit.
   
   _______
   Rewards
   ¯¯¯¯¯¯¯
      
      ***TOOLTIPS***
      [Experience]
        The total experience gained from the monster when it is defeated. This
        is divided evenly among all active party members, ex. 500 experience
        points will be divided among 5 active party members as 100 points each.
      [Coins]
        The total coins gained from the monster when it is defeated.
      [Item (5%)]
        The item that has only a 5% chance of being won. If the 5% and 25%
        items are the same, then there is a 100% chance of the item being won,
        ie. it is always rewarded.
      [Item (25%)]
        The item that has a 25% chance of being won. If the 5% and 25% items
        are the same, then there is a 100% chance of the item being won, ie. it
        is always rewarded.
      [Yoshi Cookie]
        The item rewarded from the successful use of a Yoshi Cookie on the
        monster. The probability of a successful use is determined by the
        "Morph Success" (see below).
   
   ________________
   Other Properties
   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
      
      ***TOOLTIPS***
      [Morph Success]
        The success rate of the Yoshi Cookie, Lamb's Lure and Sheep Attack
        items. 100% success rate means the item always works on the monster, 0%
        means the item never works on the monster.
      [Coin Sprite]
        The coin that shows when the monster is defeated. This property is
        ignored if the "Sprite Behavior" includes a "fade- out death".
      [Entrance Style]
        The behavior of the monster's initial animated entrance into battle.
        Although it is hardly noticeable, this might offset the exact initial
        coordinates of the monster in the formation by a couple of pixels.
      [Sprite Behavior]
        The various behaviors of the monster's sprite in battle. These include
        the sprite animations for the monster's death, its floating status, its
        common attack and defense animations, and more.
      [Strike Sound]
        The sound that plays when the monster does a common physical attack.
        Usually, but not always used.
      [Other Sound]
        The optional sound that can be used for less common physical attacks.
        These options are categorized by specific monsters, due to their
        limited usage among all monsters.
      [Elevate]
        The number of 16-pixel units a monster is raised above the ground.
   
   ______________
   BATTLE SCRIPTS
   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯
   A battle script is a set of commands which simply tell the monster what
   to do each turn. What spells or attacks it uses, under what conditions
   it uses them, etc. are all determined by a monster's battle script
   commands.
      
      ***TOOLTIPS***
      [Script Commands]
        The list of commands (aka "command tree") in the current script. Check
        the commands to delete, cut, or copy (using the toolstrip below), or
        double-click the commands to edit them in the box to the right.
      [Command List]
        Select from a list of commands to add to the monster's battle script.
        "Do" commands can either cast a spell or execute an attack on the
        current target. Either 1 specific spell/attack or 1 selected randomly
        from 3 are the options. Remember that if no target is set with the
        "Target set" command, the monster will by default choose a random ally
        to attack.
        "If" commands set a condition for all the following commands up to the
        closing "Wait 1 turn, return all" command. If the condition is met, the
        commands will execute; if not, the monster's turn is over and the
        script will start over from the beginning on the next turn.
        "Memory" commands change the values and bits of the battle memory
        addresses 7EE000 to 7EE00F. These addresses are read by "If" commands
        for checking conditions.
        "Run" commands will run a dialogue, event, or object sequence. An
        object sequence is selected from a list of animation scripts (roughly
        corresponding to the "Monster behaviors" in the animations editor) to
        playback for the monster.
        "Target" commands set a number of attributes for a given target.
        Disabling/enabling a target will prevent/allow the player to target and
        thus attack the target.
      [Insert Command]
        Insert the command after the currently selected command in the command
        tree.
      [Apply Changes]
        Applies all change made to the currently edited command.
      [Monster Image]
        Click/drag the cursor to set its upper-left distance from the monster
        sprite.
      [Target X]
        The left distance, in 8x8 tile units, of the cursor from the monster's
        sprite.
      [Target Y]
        The upper distance, in 8x8 tile units, of the cursor from the monster's
        sprite.
      [Bytes Left]
        The remaining bytes available for all battle scripts.
      [Hex]
        The raw hex data of the currently select command in the command tree.
_______
SPRITES
¯¯¯¯¯¯¯
Sprites are images representing all of the characters, monsters, items,
objects, and some spell and attack effects.
Sprite indexes can be viewed as 3 groups: 0 to 255 are primarily the
allies, ally weapons, townspeople, and other common objects. 256 to 511
are monsters, this order corresponding exactly to 0-255 in the monsters
editor. 512 to 767 are battle related sprites, like items or
explosions. 768 to 927 are spell and attack effects, and the rest are
the end credit sprites.
This editor has 2 subwindows: molds and sequences. Each sprite has its
own mold and sequence collections, both of these subwindows interacting
with one another.
   
   ***TOOLTIPS***
   [Sprite Index]
     Select the sprite to edit by name. The name is based on a label
     assigned by the editor.
   [Sprite Index]
     Select the sprite to edit by number.
   [Image]
     The image # of the currently selected sprite refers to the set of
     properties that designate the raw graphics and palette set to use.
     Anything in the "IMAGE PALETTE..." and "IMAGE GRAPHICS..." panels are
     part of the sprite's image.
   [Palette]
     The index of the palette in the palette set the sprite uses. This is
     mostly used for individual sprites that use the same image (thus, the
     same palette set) but have a different individual palette, such as the
     Sky Troopa and Malakoopa.
   [Palette Set]
     The palette # the sprite's image's palette set begins at.
   [BPP GFX Offset]
     The offset in the ROM (in hexadecimal) that the sprite's image's raw
     graphics begin. Increments by 0x20 because 4bpp 8x8 tiles are 0x20
     bytes each.
   [Animation]
     The animation # of the currently selected sprite refers to the set of
     properties that designate the sequences and molds to assign to the
     sprite.
     Anything in the "ANIMATION SEQUENCES..." and "ANIMATION MOLDS..." are
     part of the sprite's animation.
   [VRAM Size]
     Larger VRAM values will allow more space for the sprite's raw graphics
     to be stored. Generally, the larger sprites such as Culex use larger
     values.
   
   _____
   MOLDS
   ¯¯¯¯¯
   A sprite mold is basically a single sprite image. Multiple molds can be
   accessed by the sequence data to create an animation sequence. Sprite
   molds, unlike effect molds, are drawn in two formats: gridplane and
   tilemap.
   Gridplane arranges the 8x8 tiles used by the mold in a fixed table.
   Gridplane format molds are generally much smaller, with a limited
   dimension of 32x32, and a fixed position centered in the mold image
   box.
   Tilemap format is composed of 16x16 tiles, each assigned a fixed
   coordinate and a set of 4 subtiles. This is relatively more common than
   the gridplane format, and far more versatile. The mold can be drawn
   using a collection of 16x16 tiles from the tileset provided on the
   right. Even external images can be imported as a tile or whole tileset.
      
      ***TOOLTIPS***
      [Mold Collection]
        The collection of molds used by the sprite's animation. A mold is a set
        of tiles arranged either dynamically or in a predefined grid to create
        a complete image that can be used by an animation sequence.
      [Width/X coord]
        For gridplane format molds, this is the width, in 8x8 tile units, of
        the mold. For tilemap format molds, this is the absolute X coordinate
        of the 16x16 tile.
      [Height/Y coord]
        For gridplane format molds, this is the height, in 8x8 tile units, of
        the mold. For tilemap format molds, this is the absolute Y coordinate
        of the 16x16 tile.
   
   _________
   SEQUENCES
   ¯¯¯¯¯¯¯¯¯
   Sequences are the animations a sprite uses. For monster sprites, the
   sequences are labelled differently to correspond to their use in
   battle. All other sprites are simply named with the format "Sequence
   #".
      
      ***TOOLTIPS***
      [Sequence Collection]
        The collection of sequences used by the sprite's animation.
        A sequence is a collection of frames, where each frame is assigned a
        mold from the mold collection above and a duration, creating an
        animation that can be played back in the image to the right.
      [Frame Collection]
        The collection of frames used by the currently selected sequence at the
        left. Each frame is assigned a mold from the mold collection above and
        a duration, creating an animation that can be played back in the image
        to the right.
      [Mold]
        The mold used by the currently selected frame. This value is based on
        its index in the mold collection above.
      [Duration]
        The duration of the currently selected frame, or how long the frame
        will pause before the next frame starts. This value refers to the # of
        frames based on a 60-frames-per- second unit.
      [Active]
        This must be checked for a sprite sequence to be usable. If not
        checked, the sequence data will save but not be accessible in game--or
        the next time the editor opens.
__________
WORLD MAPS
¯¯¯¯¯¯¯¯¯¯
The 7 different areas of the world map in SMRPG can be edited. Each
world map image is a tileset, like battlefields, and are modified in
the same manner. Unique features of the world maps include a location
set, a banner, and a mode 7 transformation as seen in-game.
A separate layer for the banner displaying the location's name. This
and the locations can be shown or hidden with a button.
   
   ***TOOLTIPS***
   [World Map Index]
     Select the world map to load. There are 8 maps total.
     The map may appear disoriented in correlation with the locations,
     because the game engine stretches the map.
   [Show Locations]
     Show or hide the locations in the image below. If the lo- cations are
     shown, they can be clicked to edit them in the "Location Properties"
     box below.
   [Locations]
     The total # of locations that the current map uses. The collection of
     locations used by the map is based on the locations used by the earlier
     maps.
     Map #0, for example, by default uses 7 locations total, and since it is
     the first map that means it will use locations #0 - 6 (as seen in the
     "LOCATIONS" editor panel). Map #1 uses 6 locations, and because the
     last location in Map #0 is location #6, then Map #1's locations will be
     locations #7 - 12 (ie. 6 total, starting at #7).
   [Tileset]
     The tileset, or the actual image used by the map.
     To edit a tile in the tileset, click on the tile in the image above to
     edit it in the "WORLD MAP TILE EDITOR" panel to the right.
   [X]
     The X coordinate of the map.
   [Y]
     The Y coordinate of the map.
   
   _________
   Locations
   ¯¯¯¯¯¯¯¯¯
   A location set, or collection of locations which lead to a level or
   another location, is included in each world map. When the locations are
   toggled on, the map image transforms to comply with the mode 7
   transformation applied by the game. In order to provide accurate
   coordinates for the location points the image must be drawn this way in
   the editor.
      
      ***TOOLTIPS***
      [Location Index]
        Select the location to load. If the location is in the currently
        selected world map, then it will be highlighted in the map.
      [Location Name]
        Edit the location's name, as it appears at the bottom of the screen
        when the Mario sprite is over the location.
      [X]
        The absolute X coordinate of the location.
      [Y]
        The absolute Y coordinate of the location.
      [Memory Address]
        If the bit (under "BIT SET") of this memory address is set, then the
        location is enabled / visible in-game.
        Example: by default location #9 (Mushroom Way) is not enabled or
        visible until bit 2 of memory address $7065 is set. This bit is set at
        the end of event script #1396.
        These bits are always set in an event script.
      [Bit]
        If this bit of a memory address (under "IF MEMORY") is set, then the
        location is enabled / visible in-game.
        Example: by default location #9 (Mushroom Way) is not enabled or
        visible until bit 2 of memory address $7065 is set. This bit is set at
        the end of event script #1396.
        These bits are always set in an event script.
      [Location]
        If this is enabled, the destination will be another location (typically
        a location in different one of the 8 maps). If not enabled, then an
        event (Run Event) will be triggered.
      [Memory Address]
        If the bit (at the right) of this memory address is set, then the
        location will lead to the first destination (next to "lead to
        destionation"), otherwise it will lead to the second one. This is
        ignored if "LOCATION" is disabled.
      [Bit]
        If this bit of the memory address (at the left) is set, then the
        location will lead to the first destination (next to "lead to
        destionation"), otherwise it will lead to the second one. This is
        ignored if "LOCATION" is disabled.
      [Assigned event #]
        The event to run when entering the location. This is ignored if
        "LOCATION" is disabled.
      [Edit]
        Edit the assigned event # in the Events editor.
      [Lead to destination]
        The destination the location leads to.
      [Else lead to destination]
        The alternate destination the location leads to, if a memory's bit is
        not set. This is ignored if "LOCATION" is disabled.
      [East]
        Enable the eastern path of the location, or the path to the location
        the Mario sprite moves to when RIGHT is pressed on the d-pad.
      [South]
        Enable the southern path of the location, or the path to the location
        the Mario sprite moves to when DOWN is pressed on the d-pad.
      [West]
        Enable the western path of the location, or the path to the location
        the Mario sprite moves to when LEFT is pressed on the d-pad.
      [North]
        Enable the northern path of the location, or the path to the location
        the Mario sprite moves to when UP is pressed on the d-pad.
      [East location]
        The location the eastern path leads to, or the location the Mario
        sprite moves to when RIGHT is pressed on the d-pad.
      [South location]
        The location the southern path leads to, or the location the Mario
        sprite moves to when DOWN is pressed on the d-pad.
      [West location]
        The location the western path leads to, or the location the Mario
        sprite moves to when LEFT is pressed on the d-pad.
      [North location]
        The location the northern path leads to, or the location the Mario
        sprite moves to when UP is pressed on the d-pad.
      [Open eastern path if memory set]
        If the bit (at the right) of this memory address is set, then the
        eastern path will be open.
      [Open southern path if memory set]
        If the bit (at the right) of this memory address is set, then the
        southern path will be open.
      [Open western path if memory set]
        If the bit (at the right) of this memory address is set, then the
        western path will be open.
      [Open northern path if memory set]
        If the bit (at the right) of this memory address is set, then the
        northern path will be open.
      [Open eastern path if bit set]
        If this bit of the memory address (to the left) is set, then the
        eastern path will be open.
      [Open southern path if bit set]
        If this bit of the memory address (to the left) is set, then the
        southern path will be open.
      [Open western path if bit set]
        If this bit of the memory address (to the left) is set, then the
        western path will be open.
      [Open northern path if bit set]
        If this bit of the memory address (to the left) is set, then the
        northern path will be open.
_______________________________________________________________________

SUB-EDITORS
_______________________________________________________________________

_________
PREVIEWER
¯¯¯¯¯¯¯¯¯
Launch an emulator from the previewer window and load a save state for
easy ROM testing. 
Choose either the SNES9X or ZSNES emulator file to use when opening the
previewer. ZSNES will automatically load the generated save state when
the emulator is loaded from the previewer, but for SNES9X the F1 key
must be pressed manually to load the generated save state. If the
emulator has problems loading the save state, make sure the 2 steps
above have been completed. 
The latest version of ZSNES (v1.51 as of this release) is supported.
Snes9x v1.43 and/or its derivatives (rerecord, Geiger's debugger, etc.)
are preferred and should work.
Before using the previewer, do the following: 
   
   1. Make sure all editor files are in the same folder.
   
   2. Configure the emulator's save-state folder to read/write to the same
   folder as any loaded ROM. ZSNES by default already does this, and so
   does Snes9x v1.43. However, later versions of Snes9x will by default
   read/write to a "Save" folder created within the emulator's main
   folder, and if not changed it will fail to load the preview save state.
   
   ***TOOLTIPS***
   [Emulator Path]
     The path of the emulator executable file.
   [Rom Path]
     The location the preview ROM used for previewing will be stored to.
   [Dynamic]
     If enabled the preview ROM will write to the location of the ROM
     currently loaded to Lazy Shell. If not, it will write to the location
     of the Lazy Shell .exe file.
   [SNES9X Args]
     Command line arguments for when the Snes9x emulator runs by command
     line. Snes9x cannot automatically load a save state by command line so
     it must be loaded manually with F1.
   [ZSNES Args]
     Command line arguments for when the ZSNES emulator runs by command
     line. Here the default will automatically load the save state to jump
     to the preview.
   [Source of Entrance]
     Choose from a list of sources to set the previewer's save state to.
     For levels this list is generated from the entrances of other levels
     leading to the desired level to preview.
     Event scripts will produce a list of levels and coordinates where there
     are event fields assigned that script. 
     Animation scripts will open a battle and depending on the category will
     either load a formation with a monster who executes the attack / spell
     animation or set the item inventory to contain the item to preview,
     etc.
     SPCs will have no list and simply load a black screen then playback the
     song or sound effect.
     Mine cart levels will simply load the level at the same coordinates.
     The level may take a bit longer to load than other previewable
     elements.
   [Index]
     Either the index of the element to preview or a resource element to
     preview the currently selected index of whatever editor the previewer
     was opened from.
   [X]
     Mario's initial X coord when a level loads in the emulator
   [Y]
     Mario's initial Y coord when a level loads in the emulator
   [Z]
     Mario's initial Z coord, or elevation, when a level loads in the
     emulator
   [Battlefield]
     Set this for previewing elements which are battle-oriented like
     monsters or animations.
   [Allies in Party]
     Active allies in the party for the preview.
   [Ally]
     Select the ally to set their level and equipment for the preview.
   [LV]
     Set the level of the ally for the preview.
   [Weapon]
     Equip the ally with a weapon for the preview.
   [Armor]
     Equip the ally with armor for the preview.
   [Accessory]
     Equip the ally with an accessory for the preview.
   [Max Stats]
     Checking this will max out the stats of all allies and give them with
     the best equipment.
   [Reset]
     Reset the ally's level and equipment.
   [Launch]
     Generate the preview ROM + save state and launch the emulator.
________
PALETTES
¯¯¯¯¯¯¯¯
Here a palette or palette set can be modified and a number of effects
can be applied to it. The RGB can be typically modified in the "Color
levels" box, while many common color transformations are available in
the "Adjust RGB" and "Effects" tabs.
The "Switch" and "Equalize" boxes make it easy to create a custom
palette swap of a sprite, level, etc. Under the "Effects" tab other
common color transformations are found, as well as a "Threshold" and
"Colorize" feature.
The swatch box on the bottom-right is available for setting the
selected color in the palette to any generic color in the swatch.
   
   ***TOOLTIPS***
   [Palette]
     The palette or palette set. It's arranged in one or more rows, each row
     being a single palette in the set. Checking any of the buttons above or
     to the left will apply the palette effects set in the "Adjust RGB" and
     "Effects" tabs below. The buttons above will apply effects by column,
     the buttons to the left by row.
   [Current Color]
     The currently selected color. Its RGB levels can be changed in the box
     on the right.
   [R]
     Red level of the selected color.
   [G]
     Green level of the selected color.
   [B]
     Blue level of the selected color.
   [HTML]
     The RGB levels in HTML, or hexadecimal, format.
   [Set To Color]
     Sets the selected color in the palette set to the color in the box on
     the right.
   [Color Swatch]
     Pick a color in the swatch to load into the little box above, and use
     the "Set to color" button to set it as the palette set's selected
     color.
   [Update]
     Applies all changes made in the palette editor to the source's palette
     set.
   [Auto-update]
     Automatically apply any changes made in the palette editor to the
     source's palette set. If unchecked, click "Update" to apply the
     changes.
   
   __________
   Adjust RGB
   ¯¯¯¯¯¯¯¯¯¯
      
      ***TOOLTIPS***
      [Reds]
        Raise or lower the color level of the palette's reds.
      [Reds]
        Raise or lower the color level of the palette's reds.
      [Reds]
        Raise or lower the color level of the palette's reds.
      [Switch reds]
        Switches the palette's reds with what's selected in the "With" box.
      [Switch greens]
        Switches the palette's greens with what's selected in the "With" box.
      [Switch blues]
        Switches the palette's blues with what's selected in the "With" box.
      [With reds]
        Switches what's selected in the "Switch" box with the palette's reds.
      [With greens]
        Switches what's selected in the "Switch" box with the palette's greens.
      [With blues]
        Switches what's selected in the "Switch" box with the palette's blues.
      [This (reds)]
        The palette's reds will be equal to what's selected in the "Equals"
        box.
      [This (greens)]
        The palette's greens will be equal to what's selected in the "Equals"
        box.
      [This (blues)]
        The palette's blues will be equal to what's selected in the "Equals"
        box.
      [Equals reds]
        Whatever's selected in the "This" box will equal the palette's reds.
      [Equals greens]
        Whatever's selected in the "This" box will equal the palette's greens.
      [Equals blues]
        Whatever's selected in the "This" box will equal the palette's blues.
   
   _______
   Effects
   ¯¯¯¯¯¯¯
      
      ***TOOLTIPS***
      [Greyscale]
        The palette set will be converted to greyscale.
      [Negative image]
        The palette set's colors will be inverted.
      [Brightness]
        Relative brightness of the palette set. 0 is default, move left or
        right to darken or brighten the palette.
      [Contrast]
        Relative contrast of the palette set. 0 is default, move left or right
        to lower or raise the contrast.
      [Threshold]
        Apply a threshold effect on the palette set.
        A threshold effect will reduce the palette to two colors: black and
        white. The level of the threshold is the ratio of white to black: the
        higher the threshold, the darker colors will be converted to 0, or
        solid black. Lower thresholds will convert more colors to white.
      [Threshold]
        The threshold level to apply.
      [Colorize]
        Apply a colorizing effect on the palette set.
      [Hue]
        The hue, or color, to colorize the palette set with.
      [Saturation]
        The level of saturation the colorization effect on the palette set.
        Lower values will make the colors greyer, higher values more colorful.
________
GRAPHICS
¯¯¯¯¯¯¯¯
Paint edit a set of 4bpp or 2bpp graphics used by an element in the
ROM. The user can edit the graphics directly or save the graphics as an
image to edit in an external paint program (this is preferred for more
in-depth editing). The graphics image can be re-imported after the
external editing has been done.
Here a color in the palette set can be selected to draw to the graphics
image. Both a front and back color can be selected to be drawn using
the left or right click buttons.
   
   ***TOOLTIPS***
   [Palette Set]
     Choose a color to draw with in the graphics below. Right-click a color
     to draw with using the right mouse button.
     The graphics image below can only use a single palette row (16 colors)
     therefore clicking a color will show the graphics image using that
     color's palette row. Changing the palette row this way will NOT modify
     the ROM data, only how the graphics image is shown. Different objects
     in the image will use different palettes, so select the proper row to
     view a set of objects with their appropriate palette.
   [Front Color]
     Draw this color to the graphic set using the left mouse button.
   [Back Color]
     Draw this color to the graphic set using the right mouse button.
   [Contiguous]
     Fill a region with the front color. If unchecked, all pixels with the
     filled color in the entire graphics will be filled with the new color.
   [Graphics]
     Draw, erase, fill, pixels, select/replace a color, or zoom in/out using
     the toolstrip above. Only single pixels can be erased or drawn. Import
     an image with the right-click context menu.
     NOTE: when importing an image, the top-right corner of the new image
     will be pasted to the place where you right-clicked.
   [Update]
     Applies all changes made in the graphics editor to the source's
     graphics.
   [Auto-update]
     Automatically apply any changes made in the graphics editor to the
     source's graphics. If unchecked, click "Update" to apply the changes.
___________
TILE EDITOR
¯¯¯¯¯¯¯¯¯¯¯
Edit a 16x16 tile's subtiles. A subtile is 8 pixels wide and 8 pixels
high and has several distinct properties. Usually more practical
transformations to the tileset can be done more easily outside of the
tile editor with a right-click context menu.
   
   ***TOOLTIPS***
   [Tile]
     The 16x16 tile loaded. Click the quadrants to load a subtile.
   [Subtile]
     The 8x8 subtile loaded. Edit its properties in the "Subtile properties"
     box below.
   [Index]
     This value corresponds to the 8x8 tiles in the graphics editor. A
     tile's index is shown in the label below the graphics image.
   [Palette]
     The palette row, or index, used by the tile from its source's palette
     set.
   [Properties]
     "Priority 1" will give the subtile priority 1 status. "Mirror" will
     flip the subtile horizontally, "Invert" flips it vertically.
   [Mirror]
     Flips the 16x16 tile horizontally. Note that doing this will change the
     "Mirror" properties of all 4 of its subtiles.
   [Invert]
     Flips the 16x16 tile vertically. Note that doing this will change the
     "Invert" properties of all 4 of its subtiles.
   [Update]
     Applies all changes made in the graphics editor to the source's
     graphics.
   [Auto-update]
     Automatically apply any changes made in the graphics editor to the
     source's graphics. If unchecked, click "Update" to apply the changes.
________
TILESETS
¯¯¯¯¯¯¯¯
For levels, these are the level's tilesets for each of the 3 layers. If
layer 3 is not enabled for the level the layer 3 tab is inaccessible.
Tilesets for the main title can be modified exactly in the same nature
as level tilesets, with a couple of differences. The first being the
format of layer 3, and the second being the ability to import an
external image file as a single layer in just a few steps. This feature
is accessible by right-clicking the tileset image.
Mine cart levels, both mode 7 and side-scrolling, have only one tileset
to draw from.
   
   ***TOOLTIPS***
   [Layers]
     Select the layer and tileset to edit or draw from. To erase, draw to,
     etc. a specific layer in a level's (tile)map/image select the layer
     among the tabs available. Note that selecting a tab in the level editor
     will set the layer being edited for both the tilemap and the tileset.
     You can only draw layer 1, 2, and 3 tiles to their respective layers.
     Cross-layer drawing is not possible. However, layer tilesets will most
     often have identical tiles to draw the same tiles to different layers.
     You will notice that there are often repeats of tile groupings in a
     tileset, ie. two identical crates, grass patches, etc. This is because
     one grouping has priority 1 set, the other does not. Mario and NPCs may
     overlap one crate, but not the other crate.
     To help with this, you can view what tiles have priority 1 set with the
     P1 button in the toolstrip. The blue tint covers all priority 1
     subtiles.
   [L1 Tileset]
     Select one or more tiles to draw from by dragging a selection box
     around them. Right-click the selection to apply a number of changes to
     the selected tiles ("Lock tileset editing" must be unchecked).
   [L2 Tileset]
     Select one or more tiles to draw from by dragging a selection box
     around them. Right-click the selection to apply a number of changes to
     the selected tiles ("Lock tileset editing" must be unchecked).
   [L3 Tileset]
     Select one or more tiles to draw from by dragging a selection box
     around them. Right-click the selection to apply a number of changes to
     the selected tiles ("Lock tileset editing" must be unchecked).
   [Lock tileset editing]
     This should be checked when selecting tiles to draw to the map/image,
     to prevent accidental clicking/dragging a selection of tiles and
     unintentionally corrupting the tileset.
     Uncheck this only to manually edit one or more tiles in the tileset.
   [Update]
     Applies all changes made in the graphics editor to the source's
     graphics.
   [Auto-update]
     Automatically apply any changes made in the graphics editor to the
     source's graphics. If unchecked, click "Update" to apply the changes.
__________
HEX EDITOR
¯¯¯¯¯¯¯¯¯¯
Shows the entire ROM in hexadecimal format in an interactive hex
editor. Many editors have a button to open the hex editor and
automatically jump to the location of the element index's data in the
ROM.
   
   ***TOOLTIPS***
   [Current ROM]
     Shows the current ROM, including all modifications done in all editors,
     before saving to disk.
   [Original ROM]
     Shows the original ROM, since the last time it was loaded OR saved to
     disk.
   [Goto Address]
     Type the address (in hexadecimal) and hit enter to jump to the address
     in the ROM data below.
   [Search for value(s)]
     Search for one or more byte values (in hexadecimal) in the ROM. Hit
     enter to move through every search result.
   [Decimal Value]
     Type a decimal value in here and it will automatically be converted to
     hex in the box on the right.
   [Hexadecimal Value]
     Type a hexadecimal value in here and it will automatically be converted
     to decimal in the box on the left.
   [Fill Selection]
     Fills a selection in the ROM data below with a single value (in
     hexadecimal).
   [ROM Data]
     The raw ROM data as seen in a hex editor.
     Change data here just as you would in a typical hex editor. Make
     selections by clicking and dragging the cursor over a series of bytes.
     Note that only selections smaller than the height of the window can be
     made--such are the limitations of an amateur hex editor.
     Copying, pasting, and deleting values is supported with the typical
     keyboard shortcuts or the respective buttons for such functions in the
     toolstrip at the top. You may undo or redo any changes made to the data
     as well.
   [ROM Offsets]
     Offsets of each row currently visible in the ROM data box to the right.
     Each row is 16 bytes long.
